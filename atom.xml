<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Random thoughts based on true stories</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mseknibilel.github.io/"/>
  <updated>2017-06-18T11:57:03.362Z</updated>
  <id>https://mseknibilel.github.io/</id>
  
  <author>
    <name>Bilel Msekni</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Yet another design pattern</title>
    <link href="https://mseknibilel.github.io/2017/06/18/yet-another-design-pattern/"/>
    <id>https://mseknibilel.github.io/2017/06/18/yet-another-design-pattern/</id>
    <published>2017-06-18T11:57:03.000Z</published>
    <updated>2017-06-18T11:57:03.362Z</updated>
    
    <content type="html"><![CDATA[<p>It all started with this <a href="http://njimmahdi.blogspot.fr/2014/05/factory-pattern-with-net-technology.html" target="_blank" rel="external">article</a> posted by a good friend of mine about his way of implementing the factory pattern.</p>
<p>Although there is nothing to approach about his way, something kept itching me to write a second article about another design pattern that might fit in this situation as well.<br><a id="more"></a></p>
<p>Let’s start by reviewing the task:</p>
<p>The Straw hats pirates (the pirate crew in the one piece anime) contacted my company to write a software to automate pizza preparation. Sanji explained that in order to prepare pizza we need to:</p>
<ol>
<li>Prepare the Pizza Dough</li>
<li>Prepare the sauce</li>
<li>Add pizza sauce and pizza ingredients <strong>according to each person’s desires</strong></li>
<li>Put the pizza in the oven</li>
</ol>
<p>In order to complete the task, my friend wrote a Pizza maker base class where inherited classes redefine the AddIngredient Method to suit each person’s choices.</p>
<div class="figure center" style="width:;"><img class="fig-img" src="http://i.imgur.com/eDFLVvH.jpg" alt="Proposed solution"><span class="caption">Proposed solution</span></div>
<p>For example, if the person is Nami then ingredients will be cheese and olives. To add his own <a href="http://www.codeproject.com/Articles/772836/Factory-Pattern-with-NET-Technology" target="_blank" rel="external">touch</a>, my friend added a configuration section to make class adding totally on the fly. There is no doubt that the solution is flexible and neat but what happens when more people joins in the team? Or when current crew feels like tasting something new? Are we going to create sub classes for each possibility like this:</p>
<div class="figure center" style="width:;"><img class="fig-img" src="http://i.imgur.com/vmpIvCw.jpg" alt="Future problem"><span class="caption">Future problem</span></div>
<p>It’s sure not a good solution because with 3 ingredients (Olive, cheese and meat) we can have up to 7 different combinations (result = n! / [(n-k)! k!] Where n is total number of ingredients and k is the number of the picked ingredients), Imagine what will happen with 4 or 5 ingredients =&gt; explosion in number of sub classes.</p>
<p>What should we do then? It’s time to introduce the Decorator Pattern!</p>
<blockquote><p>The decorator pattern attaches additional responsibilities to an object dynamically. Decorators provide a ﬂexible alternative to subclassing for extending functionality.</p>
<footer><strong>Wikipedia</strong></footer></blockquote>
<p>Don’t worry if you don’t understand this, I myself didn’t when I first read it but this example will help clear things for us.</p>
<div class="figure center" style="width:;"><img class="fig-img" src="http://i.imgur.com/WcYbMcW.png" alt="Decorator pattern"><span class="caption">Decorator pattern</span></div>
<p><strong>Component:</strong> is the father of all, can exist on his own or equipped with decorators.<br><strong>ConcreteComponent:</strong> son of component, can do more cool stuff than his old father.<br><strong>Decorator:</strong> sort of the mother of all decorators, it teaches them the ABCs of life without precising how to act.<br><strong>ConcreteDecorator:</strong> the real deal where decorator operations are defined.</p>
<p>Let’s put this in action and see what we get:</p>
<div class="figure center" style="width:;"><img class="fig-img" src="http://i.imgur.com/6T4Geen.png" alt="Solution with decorator pattern"><span class="caption">Solution with decorator pattern</span></div>
<p><strong>Explanation:</strong></p>
<p>Our main goal is to treat all pizza objects the same (this is why everything inherits from Pizza class) and provide a mecanism to decorate our objects in a way that makes them different from one another.</p>
<p>The Pizza here is your component, it’s the base class of the object you want to decorate.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Pizza</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PreparePizza</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddSauce</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MakeDough</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PutInOven</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PrepareSauce</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Pizza with "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Three classes derive directly from Pizza: the first two (CrustyDoughPizza and ThickDoughPizza) are considered ConcreteComponents since they extend Pizza’s behavior( Exp: creates a different more delicious dough).</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CrustyDoughPizza</span> : <span class="title">Pizza</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MakeDough</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//Make CrustyDough</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Crusty Dough Pizza with "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThickDoughPizza</span> : <span class="title">Pizza</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MakeDough</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//Make thick dough</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Thick Dough Pizza with "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The last third sub class is PizzaIngredient which is the base class of any pizza ingredient since it defines what is expected from an ingredient. In this case, it forces every ingredient to override the behaviour of GetIngredients method of the Pizza class in order to have its own special implementation. Notice also the existence of a pizza field (MyPizza), its use will be covered later.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">PizzaIngredient</span> : <span class="title">Pizza</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> Pizza MyPizza &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">abstract</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Finally, by implementing PizzaIngredient methods, subclasses share the same methods but with custom functionalities therefore they can decorate Pizza objects rendering equally different but without compromising their origin. Hold on a sec, how can they decorate Pizza objects ?</p>
<p>Excellent question, each ingredient must have a constructor which takes a Pizza argument. Decoration occurs when this argument is assigned to the MyPizza property. If we need to decorate an already decorated object, all we need to do is pass in the decorated object as an argument( it’s pizza after all) to the custom constructor of the decorator.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Meat</span> : <span class="title">PizzaIngredient</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Meat</span>(<span class="params">Pizza pizza</span>)</span></div><div class="line">    &#123;</div><div class="line">        MyPizza = pizza;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> MyPizza.GetIngredients() + <span class="string">" Meat"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cheese</span> : <span class="title">PizzaIngredient</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cheese</span>(<span class="params">Pizza pizza</span>)</span></div><div class="line">    &#123;</div><div class="line">        MyPizza = pizza;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> MyPizza.GetIngredients() + <span class="string">" Cheese"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Olive</span> : <span class="title">PizzaIngredient</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Olive</span>(<span class="params">Pizza pizza</span>)</span></div><div class="line">    &#123;</div><div class="line">        MyPizza = pizza;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> MyPizza.GetIngredients() + <span class="string">" Olive"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Let’s try to make a CrustyDoughPizza with olive only:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">CrustyDoughPizza myPizza = <span class="keyword">new</span> CrustyDoughPizza();</div><div class="line"></div><div class="line"><span class="comment">//Decorate the pizza with olive</span></div><div class="line"></div><div class="line">Olive olivePizza = <span class="keyword">new</span> Olive(myPizza);</div><div class="line"></div><div class="line"><span class="keyword">var</span> pizzaIngredients = olivePizza.GetIngredients();</div><div class="line"></div><div class="line"><span class="comment">//expected answer = Crusty pizza with olive</span></div></pre></td></tr></table></figure>
<p><strong>How? One word: Recurrence !</strong></p>
<p>When we call GetIngredients of Olive, it will bounce to call GetIngredients of CrustyPizza before it replies back to us just like in the schema below.<br><div class="figure center" style="width:;"><img class="fig-img" src="http://i.imgur.com/hMQimZG.png" alt="Recurrence"><span class="caption">Recurrence</span></div></p>
<p>Let’s now do a more complicated thing: a ThickDough Cheese and Meat Pizza:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ThickDoughPizza myPizza = <span class="keyword">new</span> ThickDoughPizza();</div><div class="line"></div><div class="line"><span class="comment">//Decorate the pizza with Meat</span></div><div class="line">Meat pizzaWithMeat = <span class="keyword">new</span> Meat(myPizza);</div><div class="line"></div><div class="line"><span class="comment">//Decorate the pizza with cheese</span></div><div class="line">Cheese pizzaWithCheese = <span class="keyword">new</span> Cheese(pizzaWithMeat);</div><div class="line"><span class="keyword">var</span> pizzaIngredients = pizzaWithCheese.GetIngredients();</div><div class="line"></div><div class="line"><span class="comment">//expected answer = Crusty pizza with meat cheese</span></div></pre></td></tr></table></figure>
<p>I believe this is a good solution for situation when we don’t have control over the choices of the client. The decorator pattern makes components and decorators behave the same way abstracting differences and eliminating useless conditional tests but you may want to be careful about how you want to adjust your implementation to your case through interfaces and abstract classes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It all started with this &lt;a href=&quot;http://njimmahdi.blogspot.fr/2014/05/factory-pattern-with-net-technology.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;article&lt;/a&gt; posted by a good friend of mine about his way of implementing the factory pattern.&lt;/p&gt;
&lt;p&gt;Although there is nothing to approach about his way, something kept itching me to write a second article about another design pattern that might fit in this situation as well.&lt;br&gt;
    
    </summary>
    
    
      <category term="craftsmanship" scheme="https://mseknibilel.github.io/tags/craftsmanship/"/>
    
  </entry>
  
  <entry>
    <title>7 Steps for professional code</title>
    <link href="https://mseknibilel.github.io/2017/06/18/7-Steps-For-Professional-Code/"/>
    <id>https://mseknibilel.github.io/2017/06/18/7-Steps-For-Professional-Code/</id>
    <published>2017-06-18T11:01:46.000Z</published>
    <updated>2017-06-18T11:25:38.218Z</updated>
    
    <content type="html"><![CDATA[<p>Yeah, i know … The first question that pops into your minds is: Doesn’t people get tired of writing this bla bla over and over again ?!! My Code is perfect and I don’t need no steps to tell me what to do and what not to do … Well , I believe that if our codes where so perfect we wouldn’t spend debugging it , creating break points and buying new keyboards !!<br>Come on, it won’t take you over 10 minutes to read and perhaps avoid looking like this.</p>
<a id="more"></a>
<div class="figure nocaption center" style="width:;"><img class="fig-img" src="http://i.imgur.com/nZ4zb0O.jpg" alt=""></div>
<p><strong>Step 1 :</strong></p>
<p>Initialize Initialize and Initialize!! Don’t leave your attributes and parameters naked like that; give them a value, a string or even a null!!<br>This will minimize the chance of throwing an unexpected exception from nowhere!</p>
<p><strong>Step 2 :</strong></p>
<p>Choose meaningful names for your attributes, methods and classes. This will be handy when your lines of code starts exploding like firecrackers on New Year’s Eve and especially it will make your code friendlier for your colleagues and will keep them from cursing you behind your back.</p>
<p><strong>Step 3 :</strong></p>
<p>Beware of the Copy/Paste, it might look like the most confortable times of your coding days but one simple type change, a same parameter name or even a missed parenthesis  will definitely ruin that day for you.</p>
<p><strong>Step 4 :</strong></p>
<p>Okay, I know that you are creative and enthusiastic but slow down dude, be wise too!!<br>Don’t start everything from scratch each time you face a new problem because that will increase the complexity of your work. Instead, take a deep breath, analyse your problem and compare it to what you have got. I am sure that you will end up by adapting something old to solve what’s new.</p>
<p><strong>Step 5 :</strong></p>
<p>Now, this is no longer the ice age people, we got tools, we got power and we got style! Don’t throw all that in the bin, use them wisely and effectively and you will see how much your coding life will be easier.<br>For cave people who don’t know what tools could be : I am talking about OOP , TDD, break points , stack trace , alerts , console messages , message boxes, …etc. And of course the thing inside your skull AKA the brain!</p>
<p><strong>Step 6 :</strong></p>
<p>What I have seen in similar articles is this : do not waste time writing fancy code , do not try to make your colleagues say “What the Hell ? “ , just write simple things and let the computer handle the unnecessary loops.<br>I agree with that but what if there is an opportunity to make our code smaller, elegant and more importantly robust, would we miss that opportunity just because we want to jump on the first obvious solution that could be wrong but our laziness is blinding us from seeing it?</p>
<p><strong>Step 7 :</strong></p>
<p>He is every coder‘s mentor, he is every researcher‘s heaven, he is our friend, our saviour and our idol …. He is www.google.com , for any problems just type in what you got and he will answer!</p>
<p>I hope you like my advices and willing to follow them.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yeah, i know … The first question that pops into your minds is: Doesn’t people get tired of writing this bla bla over and over again ?!! My Code is perfect and I don’t need no steps to tell me what to do and what not to do … Well , I believe that if our codes where so perfect we wouldn’t spend debugging it , creating break points and buying new keyboards !!&lt;br&gt;Come on, it won’t take you over 10 minutes to read and perhaps avoid looking like this.&lt;/p&gt;
    
    </summary>
    
    
      <category term="craftsmanship" scheme="https://mseknibilel.github.io/tags/craftsmanship/"/>
    
  </entry>
  
  <entry>
    <title>Agile estimation</title>
    <link href="https://mseknibilel.github.io/2017/06/18/Agile-Estimation/"/>
    <id>https://mseknibilel.github.io/2017/06/18/Agile-Estimation/</id>
    <published>2017-06-18T10:05:14.000Z</published>
    <updated>2017-06-18T10:18:11.348Z</updated>
    
    <content type="html"><![CDATA[<p>Estimation is a very important part of scrum. It allows the team to evaluate how much work is needed to finish an item and therefore conclude what can be delivered next sprint. It also helps product owners prioritize their items by taking into consideration the required amount of work. An item that takes too much time to be done usually has a lesser priority than another that can be finished quickly. Estimating the right way is essential in scrum to get the best possible results.<br><a id="more"></a></p>
<div class="figure nocaption center" style="width:;"><img class="fig-img" src="http://i.imgur.com/UqSjuq8.png" alt=""></div>
<p>There are many techniques to estimate like story points, T-shirt size and time estimation. The latter is the most common method because it is well appreciated by top management.  It’s an easily understood parameter and can be converted to cost therefore gives more control on the project. This is incorrect because estimating in time gives inaccurate results due to the nature of software industry. Most new feature can be done using different methods so it’s not clear which one to choose at the beginning. Furthermore, bugs need to be analysed in order to find root causes. This investigation is hardly measurable in time because it depends on the complexity of the problem and the skills of the investigator. All these factors make time estimation hard thus planning poker ceremonies consume a lot of time which means attendees loss of focus and interest quickly. This is not the only frustrating thing, time estimation is a symbol of micro management. Managers tend to ask the agile team to time track their daily activities and sometimes they go furious if one item does not respect its estimation. This impacts negatively the team motivation (babysitting feeling, lack of trust) and make estimations higher than usual.</p>
<p>The second method used for estimation is T-shirt size. It consists on estimating items according to their work amount: XS, S, M, L and XL. This makes estimation relatively easier and planning pokers shorter because it doesn’t require to spend lot time analysing solutions and voting options are limited. It’s sufficient to say this item is small or that item is medium in order to assign it to category and move to the next item. The results are more accurate if taken from a category point of view but from a more granular perspective some items might consume more time than it was estimated for therefore reducing the accuracy of team velocity. Comparing items becomes also complicated because there is no clear mathematical relationship between extra small and large.</p>
<p>The last method for estimation is story point estimation. The goal of this technique is to assign a number of points to every task based on the complexity. For example, a complicated story will have more points than a simpler one. This approach helps the dev team to focus on how difficult is the problem from a technical point of view rather than how much time needed to accomplish the task. Poker plannings don’t take too much time because it’s a complexity evaluation (not a solution discussion) and voting choice is limited. In addition, stories can be compared based on the number of assigned points making velocity more accurate since it is the sum of all story points. Furthermore, this technique helps management predict when an item will be delivered. For instance, if a team velocity is equal to 15 and the backlog has items with following estimated complexity points: 5, 3, 5, 2, 7. The last item with 7 points will be delivered on the next sprint because the current one is full (5+3+5+2 = 15). If the sprint duration is equal to 2 weeks than the item should be delivered in 2 weeks. This method is pretty efficient when coming to drawing charts about the product progress and planning.</p>
<p>Although scrum recommends this method for estimation, it’s the least used one because it’s not well understood. Let’s dive deeper in this concept :</p>
<p>Estimating in story points is about guessing how complex the task is. It’s a total abstraction from time. This abstraction is unfortunately confused with the fact that developers might seize the opportunity to spend more time than required on a specific item therefore plumbing productivity performance. Although this is true, it’s sure not the fault of story points method but laziness. Lazy people will always find an excuse even if their tasks are time boxed. The fear of budget depletion is totally understood but it should not be an excuse to time track every single activity. Like mentioned earlier, time tracking is a sign of lack of trust and micro-management. A better approach will be to trust in the dev team. Giving them power to self-organize also means giving them the responsibility to deliver requested feature while respecting deadlines.</p>
<p>Moving to story points estimation is not difficult, it can be started in parallel run mode to determine  the average team velocity. The difficult part in my opinion is to convince product owner and stakeholders about the advantages of this method. One should start with by explaining the nature of software industry and its challenges (difficult predictability, technical and functional environments). Furthermore, he should talk about how being agile means focusing on the current situation and the near future. This means that the far away future of the product is uncertain and vague but isn’t it already ? The faraway future can’t be predicted because factors change all the time so there is no need to spend too much time analysing opportunities that might not come. It’s understood that every manager would like to guarantee the success of his project but success doesn’t mean that every feature they have in mind must be delivered before the budget runs out because no one knows when the budget will really run out (budget cuts, more investments, …). The truth is success means that at the end of every sprint, the delivered product has the highest added value possible which means that managers should focus more on prioritizing their features based on their added value and worry less about the future. If applied correctly, the best insurance managers have against failure is that they can pull the plug on the project anytime and still get the best outcome possible.</p>
<p>Finally, adopting scrum and agile isn’t as easy as some people think. Velocity is a fragile factor that depends on many elements. Following KPIs must be done regularly to increase the team production. What agile believes in is that this trust motivate people and engages them even more in the process. Thinking people work better when their activities are time tracked daily will make them work more is absurd. People produce more and better when they feel involved and trusted.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Estimation is a very important part of scrum. It allows the team to evaluate how much work is needed to finish an item and therefore conclude what can be delivered next sprint. It also helps product owners prioritize their items by taking into consideration the required amount of work. An item that takes too much time to be done usually has a lesser priority than another that can be finished quickly. Estimating the right way is essential in scrum to get the best possible results.&lt;br&gt;
    
    </summary>
    
    
      <category term="agile" scheme="https://mseknibilel.github.io/tags/agile/"/>
    
  </entry>
  
</feed>

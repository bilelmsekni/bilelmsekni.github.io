<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Random thoughts based on true stories</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mseknibilel.github.io/"/>
  <updated>2017-09-19T05:40:50.571Z</updated>
  <id>https://mseknibilel.github.io/</id>
  
  <author>
    <name>Bilel Msekni</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tips from an Angular Trip - Kata</title>
    <link href="https://mseknibilel.github.io/2017/09/19/ng-marketplace-kata/"/>
    <id>https://mseknibilel.github.io/2017/09/19/ng-marketplace-kata/</id>
    <published>2017-09-19T05:40:50.000Z</published>
    <updated>2017-09-19T05:40:50.571Z</updated>
    
    <content type="html"><![CDATA[<p>To continue our journey with Angular, i created a special kata to help dive deeper in the Angular framework. We will be developing an e-commerce application with two pages but full of special tips and tricks.<br>When finished, the application should look like this: <a href="https://mseknibilel.github.io/ng-marketplace/">Ng-MarketPlace</a><br><a id="more"></a></p>
<h1 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h1><ol>
<li>Requirements</li>
<li>Part one: Angular basics</li>
<li>Part two: Angular advanced</li>
<li>Licencing and information</li>
</ol>
<h1 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h1><p>A first experience with angular is recommended but not required as the kata will slowly progress from the fundamentals to advanced techniques.</p>
<h2 id="Preparing-the-machine"><a href="#Preparing-the-machine" class="headerlink" title="Preparing the machine"></a>Preparing the machine</h2><ol>
<li>Make sure you have a running internet connection</li>
<li><p>Install the lastest <strong>Node LTS</strong> from <a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/</a></p>
</li>
<li><p>Verify node installation using the command lines:</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node -v</div><div class="line"><span class="comment"># should display 6.11.2 or higher</span></div></pre></td></tr></table></figure>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm -v</div><div class="line"><span class="comment"># should display 4.1.1 or higher</span></div></pre></td></tr></table></figure></li>
<li><em>Optional:</em> use a code editor (<a href="https://code.visualstudio.com/" target="_blank" rel="external">Visual Studio Code</a> is my recommendation)</li>
</ol>
<h1 id="Part-one-Angular-basics"><a href="#Part-one-Angular-basics" class="headerlink" title="Part one: Angular basics"></a>Part one: Angular basics</h1><h2 id="Create-a-new-project-10-min"><a href="#Create-a-new-project-10-min" class="headerlink" title="Create a new project (10 min)"></a>Create a new project (10 min)</h2><ol>
<li>Install Angular CLI<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g @angular/cli</div></pre></td></tr></table></figure></li>
<li>Create a new project and name it ng-marketplace<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng new marketplace</div></pre></td></tr></table></figure></li>
<li>Run the application and navigate to the home page<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng serve</div></pre></td></tr></table></figure></li>
<li>Modify the title from <code>Welcome to app!</code> to <code>Welcome to MarketPlace</code></li>
</ol>
<h2 id="Create-an-items-board-component-30-min"><a href="#Create-an-items-board-component-30-min" class="headerlink" title="Create an items-board component (30 min)"></a>Create an items-board component (30 min)</h2><ol>
<li>The marketplace has 5 categories of goods, create a new component called items-board to display them all</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">name</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">Electronics</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">Women</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">Car</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">Home</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">Books</td>
</tr>
</tbody>
</table>
<ol>
<li>Style the page using bootstrap and fontawesome icons</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">id</th>
<th style="text-align:center">name</th>
<th style="text-align:center">icon</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">Electronics</td>
<td style="text-align:center">fa fa-desktop fa-4x</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">Women</td>
<td style="text-align:center">fa fa-female fa-4x</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">Car</td>
<td style="text-align:center">fa fa-car fa-4x</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">Home</td>
<td style="text-align:center">fa fa-home fa-4x</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">Books</td>
<td style="text-align:center">fa fa-book fa-4x</td>
</tr>
</tbody>
</table>
<ol>
<li>Retrieve data from a remote server instead of hard coding it in the component.</li>
<li>Move the data retrieving logic to a dedicated service.</li>
<li>Fix failing tests</li>
<li>Create the following 3 tests for the ItemsBoardComponent<ul>
<li>Should create ItemsBoardComponent when everything is ok</li>
<li>Should create a list of 3 lines when categories count is 3</li>
<li>Should display second category with id 2 and iconClass tof when second category has id 2 and iconClass tof</li>
</ul>
</li>
</ol>
<h2 id="Setup-purchase-form-30-min"><a href="#Setup-purchase-form-30-min" class="headerlink" title="Setup purchase form (30 min)"></a>Setup purchase form (30 min)</h2><ol>
<li>Create a form to host the category selection input radio </li>
<li>Add a selectBox to display category items sorted by price.</li>
<li>Add selectBox to purchaseForm</li>
<li>Change the content of items selectBox according the the selected category.</li>
<li>Fix failing tests and add the following test<ul>
<li>Should load women items values when user chooses women category</li>
</ul>
</li>
<li>Display the details of the selected item (Description, Price and Picture)</li>
<li>Add a text box to choose the desired item quantity</li>
<li>Add a button to submit the selected item and its quantity to cart</li>
<li>Display the cart items and the total value of the order</li>
</ol>
<h2 id="Create-a-billing-form-component-10-min"><a href="#Create-a-billing-form-component-10-min" class="headerlink" title="Create a billing form component (10 min)"></a>Create a billing form component (10 min)</h2><ol>
<li>Create a new component called BillingFormComponent to display the second page of the application</li>
<li>Display the second page using the url /billing, first page should be accessible using <em>/marketplace</em> or <em>/</em></li>
</ol>
<h1 id="Part-two-Angular-advanced"><a href="#Part-two-Angular-advanced" class="headerlink" title="Part two: Angular advanced"></a>Part two: Angular advanced</h1><h2 id="Dynamic-forms-20-min"><a href="#Dynamic-forms-20-min" class="headerlink" title="Dynamic forms (20 min)"></a>Dynamic forms (20 min)</h2><ol>
<li><p>Create the billing form using the follwing instructions:</p>
<ul>
<li>TextBox for first name</li>
<li>TextBox for last name</li>
<li>TextBox for Address<ul>
<li>Street number: (max 2 number otherwise display an message error</li>
<li>Street name</li>
<li>ZipCode: must have 5 numbers otherwise display an error message</li>
</ul>
</li>
<li>Use the DynamicComponentsModule</li>
</ul>
</li>
</ol>
<h2 id="Feature-module-20-min"><a href="#Feature-module-20-min" class="headerlink" title="Feature module (20 min)"></a>Feature module (20 min)</h2><ol>
<li>Move the BillingFormComponent component into a feature module called BillingFormModule</li>
<li>Lazy load the BillingFormModule</li>
<li>Build the application in AoT mode, fix any errors that might occur.</li>
</ol>
<h2 id="Redux-amp-NgRx-30-min"><a href="#Redux-amp-NgRx-30-min" class="headerlink" title="Redux &amp; @NgRx (30 min)"></a>Redux &amp; @NgRx (30 min)</h2><ol>
<li>Setup a store for the application using @NgRx library</li>
<li>Adapt the ItemsBoardComponent accordingly to use the store</li>
<li>Install the <a href="http://extension.remotedev.io/" target="_blank" rel="external">Redux DevTools extension</a> to test time travel debugging and more features</li>
</ol>
<h1 id="Licencing-and-information"><a href="#Licencing-and-information" class="headerlink" title="Licencing and information"></a>Licencing and information</h1><p>Ng-MarketPlace Kata is licensed under a Creative Commons Attribution 3.0 Unported License.</p>
<p><img src="http://i.imgur.com/4XWrp.png" alt="ScreenShot"></p>
<p>To view a copy of this license, visit [ <a href="http://creativecommons.org/licenses/by/3.0/deed.en_US" target="_blank" rel="external">http://creativecommons.org/licenses/by/3.0/deed.en_US</a> ].</p>
<p>For any questions, contact me on msekni.bilel@gmail.com</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;To continue our journey with Angular, i created a special kata to help dive deeper in the Angular framework. We will be developing an e-commerce application with two pages but full of special tips and tricks.&lt;br&gt;When finished, the application should look like this: &lt;a href=&quot;https://mseknibilel.github.io/ng-marketplace/&quot;&gt;Ng-MarketPlace&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Angular" scheme="https://mseknibilel.github.io/tags/Angular/"/>
    
      <category term="kata" scheme="https://mseknibilel.github.io/tags/kata/"/>
    
  </entry>
  
  <entry>
    <title>Tips from an Angular trip - Smart SEO</title>
    <link href="https://mseknibilel.github.io/2017/08/18/smart-seo-with-angular/"/>
    <id>https://mseknibilel.github.io/2017/08/18/smart-seo-with-angular/</id>
    <published>2017-08-18T05:56:32.000Z</published>
    <updated>2017-08-19T06:10:28.429Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to another post about my Angular Trip, this time i’ll be covering SEO optimization with Angular apps. If you didn’t read my previous post about testing, you can find it <a href="https://mseknibilel.github.io/2017/07/17/TAC-Angular-Testing/">here</a>.<br><a id="more"></a></p>
<h1 id="Part-One-Preparing-ground"><a href="#Part-One-Preparing-ground" class="headerlink" title="Part One: Preparing ground"></a>Part One: Preparing ground</h1><p>The source code used in this blog post can be found <a href="https://github.com/mseknibilel/ang-smart-seo" target="_blank" rel="external">here</a>. It was generated using Angular CLI to demonstrate how SEO can be improved within an Angular application. Before we dive into the details of the application, let’s do a quick basics tour.</p>
<h2 id="What-is-SEO"><a href="#What-is-SEO" class="headerlink" title="What is SEO ?"></a>What is SEO ?</h2><blockquote><p>Search engine optimization (SEO) is the process of affecting the visibility of a website or a web page in a web search engine’s unpaid results.</p>
<footer><strong>wikipedia</strong></footer></blockquote>
<p>In other words, web search engines like Google, Yahoo, … fetch websites metadata using crawlers. Metadata helps search engines understand the content of websites and determine if it matches search queries. The more accurate is the metadata, the better will be the ranking of the website.</p>
<p>However, Angular is a client side framework which means code executes on the client machine. This is an issue for crawlers because they can’t execute javascript, they can only read, therefore can’t interpret the content of the page which inflics a penalty on the website’s visibility.</p>
<h2 id="Angular-Universal"><a href="#Angular-Universal" class="headerlink" title="Angular Universal"></a>Angular Universal</h2><p>If Angular can run on the server, search engines will be able to read the metadata and index its content. Fortunatly, this is exaclty what Angular Universal does. Universal was created to make Angular render on the server for faster initial load and enhanced SEO. Starting Angular 4.3, it was integrated in the official ecosystem. Let’s try to understand how it works.</p>
<h1 id="Part-Two-Setting-up"><a href="#Part-Two-Setting-up" class="headerlink" title="Part Two: Setting up"></a>Part Two: Setting up</h1><p>In a similar approach to client side, Angular is bootstrapped using an AppServerModule which imports the AppModule and ServerModule.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; ServerModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-server'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app/app.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">'./app/app.module'</span>;</div><div class="line">@NgModule(&#123;</div><div class="line">  <span class="attr">imports</span>: [</div><div class="line">          ServerModule,</div><div class="line">          AppModule</div><div class="line">  ],</div><div class="line">  <span class="attr">bootstrap</span>: [</div><div class="line">          AppComponent</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppServerModule</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>Notice the ServerModule being imported from the platform-server library, the equivalent of the platform-browser library.</p>
<p>Server side rendering should only be for the first page, therefore it needs to pass on the torch to the normal execution mode of Angular using the <strong>withServerTransition</strong> method.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@NgModule(&#123;</div><div class="line">  <span class="attr">declarations</span>: [</div><div class="line">    AppComponent</div><div class="line">  ],</div><div class="line">  <span class="attr">imports</span>: [</div><div class="line">    BrowserModule.withServerTransition(&#123;</div><div class="line">        <span class="attr">appId</span>: <span class="string">'smart-ang-seo'</span></div><div class="line">    &#125;),</div></pre></td></tr></table></figure>
<p>The app is now server side ready but it still missing the server. To create it, an easy option is to use Express server.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'reflect-metadata'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/zone-node'</span>;</div><div class="line"><span class="keyword">import</span> &#123; platformServer, renderModuleFactory &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-server'</span></div><div class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></div><div class="line"><span class="keyword">import</span> &#123; AppServerModuleNgFactory &#125; <span class="keyword">from</span> <span class="string">'../dist/ngfactory/src/app/app.server.module.ngfactory'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</div><div class="line"><span class="keyword">import</span> &#123; readFileSync &#125; <span class="keyword">from</span> <span class="string">'fs'</span>;</div><div class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">'path'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> PORT = <span class="number">4000</span>;</div><div class="line"></div><div class="line">enableProdMode();</div><div class="line"></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line"></div><div class="line"><span class="keyword">let</span> template = readFileSync(join(__dirname, <span class="string">'..'</span>, <span class="string">'dist'</span>, <span class="string">'index.html'</span>)).toString();</div><div class="line"></div><div class="line">app.engine(<span class="string">'html'</span>, (_, options, callback) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> opts = &#123; <span class="attr">document</span>: template, <span class="attr">url</span>: options.req.url &#125;;</div><div class="line"></div><div class="line">  renderModuleFactory(AppServerModuleNgFactory, opts)</div><div class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> callback(<span class="literal">null</span>, html));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</div><div class="line">app.set(<span class="string">'views'</span>, <span class="string">'src'</span>)</div><div class="line"></div><div class="line">app.get(<span class="string">'*.*'</span>, express.static(join(__dirname, <span class="string">'..'</span>, <span class="string">'dist'</span>)));</div><div class="line"></div><div class="line">app.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.render(<span class="string">'index'</span>, &#123; req &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(PORT, () =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`listening on http://localhost:<span class="subst">$&#123;PORT&#125;</span>!`</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>Express is going to read the content of the index.html and use the renderModuleFactory method imported from the platform-server module to execute the angular app then return the stream as a reponse to the request.<br>Notice that the AppServerModuleNgFactory is generated using the angular compiler.<br>Some adjustments are needed for the compile to work properly:</p>
<ul>
<li>Add server.ts to the exclude array in <strong>/src/tsconfig.app.json</strong></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">"exclude"</span>: [</div><div class="line">  <span class="string">"server.ts"</span>,</div><div class="line">  <span class="string">"test.ts"</span>,</div><div class="line">  <span class="string">"**/*.spec.ts"</span></div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>Add <strong>angularCompilerOptions</strong> to tsconfig.json</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"angularCompilerOptions"</span>: &#123;</div><div class="line">    <span class="string">"genDir"</span>: <span class="string">"./dist/ngfactory"</span>,</div><div class="line">    <span class="string">"entryModule"</span>: <span class="string">"./src/app/app.module#AppModule"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>Finally, use these commands to run the application</p>
<p>To build the application:</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng build --prod &amp; ngc</div></pre></td></tr></table></figure>
<p>To run the application:</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts-node src/server.ts</div></pre></td></tr></table></figure>
<p><strong>Hint</strong>: I added an npm task for this:</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run universal</div></pre></td></tr></table></figure>
</li>
</ul>
<p>To verify that the application can be server side rendered, deactivate javascript execution in your browser then navigate to <code>http://localhost:4000</code></p>
<h1 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h1><p>Our pages are finally readable by crawlers so it’s time to add metadata. Meta and Title are provided by the platform-browser library. They are used to provide unique details about the content of the page.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(private meta: Meta, private title: Title) &#123; &#125;</div><div class="line"></div><div class="line">   ngOnInit() &#123;</div><div class="line">        title.setTitle(<span class="string">'My Home Page'</span>);</div><div class="line"></div><div class="line">        meta.addTags([</div><div class="line">            &#123; <span class="attr">name</span>: <span class="string">'author'</span>, <span class="attr">content</span>: <span class="string">'bms.com'</span> &#125;,</div><div class="line">            &#123; <span class="attr">name</span>: <span class="string">'description'</span>, <span class="attr">content</span>: <span class="string">'this is my home description'</span> &#125;,</div><div class="line">        ]);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Run the app again and you will see meta and title elements in the source code of the page.</p>
<h1 id="Part-three-Diving-deeper"><a href="#Part-three-Diving-deeper" class="headerlink" title="Part three: Diving deeper"></a>Part three: Diving deeper</h1><p>Because internet trends continually change, we need to update our metadata accordingly to maintain our visibility in search results. Furthermore, sometimes, it’s useful to choose which metadata to return according to the characteristics of the crawler (origin, language, …). For instance, if the crawler defines english as an accept language, it will be interesting to return the english version of the most trending keywords that your website’s content covers.</p>
<p>Although, it might seems like a tricky task, it’s actually not that complicated.</p>
<p>First, we need to retrieve information about the crawler and pass it to our Angular app using Express. In <code>server.ts</code>, modify the engine line to extract the <code>accept-language</code> header value from the incoming request:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.engine(<span class="string">'html'</span>, (_, options, callback) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> opts = &#123; <span class="attr">document</span>: template, <span class="attr">url</span>: options.req.url &#125;;</div><div class="line">  region.ipAdr = options.req.ip;</div><div class="line">  region.lang = options.req.headers[<span class="string">'accept-language'</span>];</div><div class="line">  renderModuleFactory(AppServerModuleNgFactory, opts)</div><div class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> callback(<span class="literal">null</span>, html));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>and pass it to angular via an endpoint:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</div><div class="line">app.set(<span class="string">'views'</span>, <span class="string">'src'</span>);</div><div class="line"></div><div class="line">app.get(<span class="string">'/region'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.send(region);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.get(<span class="string">'*.*'</span>, express.static(join(__dirname, <span class="string">'..'</span>, <span class="string">'dist'</span>)));</div></pre></td></tr></table></figure>
<p>Then add a service to handle the choosing of the adequate keywords:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Http, Response &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/do'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/switchMap'</span>;</div><div class="line"></div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SeoService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(private http: Http) &#123; &#125;</div><div class="line"></div><div class="line">    getKeywords(): Observable&lt;string&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getRegion()</div><div class="line">            .do(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</div><div class="line">            .switchMap(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.getKeywordsByRegion(res[<span class="number">0</span>]))</div><div class="line">            .do(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getKeywordsByRegion(arg: string): Observable&lt;string&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (arg === <span class="string">'fr-Fr'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="string">'https://api-adresse.data.gouv.fr/search/?q=eiffel tower'</span>)</div><div class="line">                .map(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> res.json() <span class="keyword">as</span> any)</div><div class="line">                .map(<span class="function"><span class="params">res</span> =&gt;</span> res.query);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="string">'https://api-adresse.data.gouv.fr/search/?q=downing street'</span>)</div><div class="line">                .map(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> res.json() <span class="keyword">as</span> any)</div><div class="line">                .map(<span class="function"><span class="params">res</span> =&gt;</span> res.query);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getRegion(): Observable&lt;string[]&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="string">'http://localhost:4000/region'</span>)</div><div class="line">            .map(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> res.json() <span class="keyword">as</span> any)</div><div class="line">            .map(<span class="function"><span class="params">res</span> =&gt;</span> res.lang.split(<span class="string">';'</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Finally, use the service inside your components:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(private meta: Meta, title: Title, private adrService: SeoService) &#123;</div><div class="line"></div><div class="line">        title.setTitle(<span class="string">'My Home Page'</span>);</div><div class="line"></div><div class="line">        meta.addTags([</div><div class="line">            &#123; <span class="attr">name</span>: <span class="string">'author'</span>, <span class="attr">content</span>: <span class="string">'bms.com'</span> &#125;,</div><div class="line">            &#123; <span class="attr">name</span>: <span class="string">'description'</span>, <span class="attr">content</span>: <span class="string">'this is my home description'</span> &#125;,</div><div class="line">        ]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ngOnInit() &#123;</div><div class="line">        <span class="keyword">this</span>.adrService.getKeywords()</div><div class="line">            .subscribe(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.meta.addTag(&#123; <span class="attr">name</span>: <span class="string">'keywords'</span>, <span class="attr">content</span>: res &#125;));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>That was an easy way to keep your website up to date without a lot of effort but keep in mind that if your pages contain information irrelevant to your metadata, your website will likely be downgraded by search engines.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to another post about my Angular Trip, this time i’ll be covering SEO optimization with Angular apps. If you didn’t read my previous post about testing, you can find it &lt;a href=&quot;https://mseknibilel.github.io/2017/07/17/TAC-Angular-Testing/&quot;&gt;here&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="Angular" scheme="https://mseknibilel.github.io/tags/Angular/"/>
    
      <category term="Universal" scheme="https://mseknibilel.github.io/tags/Universal/"/>
    
      <category term="SEO" scheme="https://mseknibilel.github.io/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>Tips from an Angular trip - Testing</title>
    <link href="https://mseknibilel.github.io/2017/07/17/TAC-Angular-Testing/"/>
    <id>https://mseknibilel.github.io/2017/07/17/TAC-Angular-Testing/</id>
    <published>2017-07-17T20:35:44.000Z</published>
    <updated>2017-07-17T20:35:44.809Z</updated>
    
    <content type="html"><![CDATA[<p>Since Angular’s official release in September 2016, a lot of ink has been spilled over the ground-up rewrite of AngularJS.<br>While the quantity of informations is huge, it seldom addresses tips on how to solve specific problems. This has led me to write this serie of posts about my journey with Angular.<br><a id="more"></a><br>In this post, I will focus on testing tips. If you are unfamiliar with Angular testing, you can check out this very good <a href="https://codecraft.tv/courses/angular/unit-testing/overview/" target="_blank" rel="external">tutorial</a> from codecraft.</p>
<h1 id="Destimator"><a href="#Destimator" class="headerlink" title="Destimator"></a>Destimator</h1><p>First, I created an application called Destimator which estimates your death risk. Pretty crazy right ! Well it was hard to find an original idea with all those demo apps in the wild but no worries, nothing is scary, after all we are here to talk Angular ;)<br>It is splitted into two parts:</p>
<ul>
<li><strong>estimation-form:</strong> Responsible for rendering the form and display the result.<ul>
<li>estimation-form.component.ts: Rendering component</li>
<li>estimation-form-component.html: Component template</li>
<li>estimation-info.model.ts: form information model</li>
<li>estimation-result.model.ts: form result model</li>
</ul>
</li>
<li><strong>estimation-logic:</strong> Business logic for calculating death risk.<ul>
<li>estimation-logic.service.ts: service to calculate then estimate death risk</li>
<li>score-range.service.ts: service to retrive data from api</li>
<li>score-range.model.ts: model for communicating with api</li>
</ul>
</li>
</ul>
<p>Destimator’s repo is publicly available on my github <a href="https://github.com/mseknibilel/Destimator" target="_blank" rel="external">here</a>. If you dare to try <a href="https://mseknibilel.github.io/Destimator/">it</a><br>Now, that we have a basic understanding of the roles, we can move to the testing part.</p>
<h1 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h1><h2 id="Frameworks-tip"><a href="#Frameworks-tip" class="headerlink" title="Frameworks tip"></a>Frameworks tip</h2><p>The project was generated using <a href="https://github.com/angular/angular-cli" target="_blank" rel="external">Angular-CLI</a>. The testing uses the very popular <a href="https://jasmine.github.io/" target="_blank" rel="external">Jasmine</a> framework for testing, asserting and even mocking. I prefer to let Jasmine take care of the testing part only while <a href="http://chaijs.com/ popular assertion library" target="_blank" rel="external">Chai</a> handle the assertion part and <a href="http://sinonjs.org/ popular mocking library" target="_blank" rel="external">Sinon</a> the mocking part.<br>It’s a choice driven by Separation of Concerns (one thing should do one thing only and do it well) although some might argue that this is JavaScript fatigue all over again.</p>
<p>Bare with me for the time being, I hope to convince you by this post’s end.<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -D chai sinon</div></pre></td></tr></table></figure></p>
<h2 id="First-test-technique"><a href="#First-test-technique" class="headerlink" title="First test technique"></a>First test technique</h2><p>Testing an angular component consists on preparing a standalone module that will contain every dependency your component and its template require to run. While most people will copy paste or generate a testing file, I prefer to start with an empty module. Why ? Because understanding dependencies helps me while debugging and tuning my application.<br>In this example, I want to test my estimation-form.component, so my approach is:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ComponentFixture, TestBed &#125; <span class="keyword">from</span> <span class="string">'@angular/core/testing'</span>;</div><div class="line"><span class="keyword">import</span> &#123; EstimationFormComponent &#125; <span class="keyword">from</span> <span class="string">'app/estimation-form/estimation-form.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</div><div class="line">describe(<span class="string">'estimation form'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> fixture: ComponentFixture&lt;EstimationFormComponent&gt;;</div><div class="line">    <span class="keyword">let</span> comp: EstimationFormComponent;</div><div class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        TestBed.configureTestingModule(&#123;</div><div class="line">            <span class="attr">imports</span>: [],</div><div class="line">            <span class="attr">declarations</span>: [</div><div class="line">              EstimationFormComponent</div><div class="line">            ],</div><div class="line">            <span class="attr">providers</span>: []</div><div class="line">        &#125;);</div><div class="line">        fixture = TestBed.createComponent(EstimationFormComponent);</div><div class="line">        comp = fixture.componentInstance;</div><div class="line">    &#125;);</div><div class="line">    it(<span class="string">'should have cheatingOnPartnerLvl, adrenalineDose, hasSuperHeroFriend as form keys when component initialize'</span>, () =&gt; &#123;</div><div class="line">        comp.ngOnInit();</div><div class="line">        expect(<span class="built_in">Object</span>.keys(comp.estimationForm.value)).to.be.eql([<span class="string">'cheatingOnPartnerLvl'</span>, <span class="string">'adrenalineDose'</span>, <span class="string">'hasSuperHeroFriend'</span>, <span class="string">'email'</span>]);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><br>As you can see, my test is simply checking if I have set the right keys in my reactive form group. Although the test will very likely pass (unless I made a typo somewhere), it won’t run because my testing module doesn’t contain my component’s dependencies.<br>Let’s try to run it and see the error:<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm test</div></pre></td></tr></table></figure><br>The output is:<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error: Template parse errors:</div><div class="line">       Can<span class="string">'t bind to '</span>formGroup<span class="string">' since it isn'</span>t a known property of <span class="string">'div'</span>. (<span class="string">"&lt;div class="</span>row<span class="string">" [ERROR -&gt;][formGroup]="</span>estimationForm<span class="string">"&gt;</span></div></pre></td></tr></table></figure><br>Well, this means that our component is dependent on the ReactiveFormsModule which contains the formGroup directive. With some little magic:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ComponentFixture, TestBed &#125; <span class="keyword">from</span> <span class="string">'@angular/core/testing'</span>;</div><div class="line"><span class="keyword">import</span> &#123; EstimationFormComponent &#125; <span class="keyword">from</span> <span class="string">'app/estimation-form/estimation-form.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</div><div class="line"><span class="keyword">import</span> &#123; ReactiveFormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</div><div class="line">describe(<span class="string">'estimation form'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> fixture: ComponentFixture&lt;EstimationFormComponent&gt;;</div><div class="line">    <span class="keyword">let</span> comp: EstimationFormComponent;</div><div class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        TestBed.configureTestingModule(&#123;</div><div class="line">            <span class="attr">imports</span>: [</div><div class="line">            <span class="comment">// Adding the required module</span></div><div class="line">              ReactiveFormsModule</div><div class="line">            ],</div><div class="line">            <span class="attr">declarations</span>: [</div><div class="line">              EstimationFormComponent</div><div class="line">            ],</div><div class="line">            <span class="attr">providers</span>: []</div><div class="line">        &#125;);</div><div class="line">        ...</div></pre></td></tr></table></figure><br>If we run it again, a new error appears:<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Error: Template parse errors:</div><div class="line"><span class="string">'md-icon'</span> is not a known element:</div><div class="line"><span class="keyword">If</span> <span class="string">'md-icon'</span> is an Angular component, then verify that it is part of this module.</div></pre></td></tr></table></figure><br>Again, our component’s template is using Angular Material components without importing the MaterialModule in our testing module. Fix it by importing that module.<br>I won’t go through all error messages because it’s not my point. What I wanted to explain by the simple test approach is that you probably need to spend some time understanding what your component requires to run before starting to test it. This might seems time consuming but if one single test can help remove duplicated dependencies, optimize my code and discover more about Angular modules, it might be a good time investment.</p>
<h2 id="Isolation-technique"><a href="#Isolation-technique" class="headerlink" title="Isolation technique"></a>Isolation technique</h2><p>Let’s fast forward to where we finish setting up all dependencies, our file should look like this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ComponentFixture, TestBed &#125; <span class="keyword">from</span> <span class="string">'@angular/core/testing'</span>;</div><div class="line"><span class="keyword">import</span> &#123; EstimationFormComponent &#125; <span class="keyword">from</span> <span class="string">'app/estimation-form/estimation-form.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; ReactiveFormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</div><div class="line"><span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</div><div class="line"><span class="keyword">import</span> &#123; MaterialModule &#125; <span class="keyword">from</span> <span class="string">'@angular/material'</span>;</div><div class="line"><span class="keyword">import</span> &#123; EstimationLogicService &#125; <span class="keyword">from</span> <span class="string">'app/estimation-logic/estimation-logic.service'</span>;</div><div class="line"><span class="keyword">import</span> &#123; ScoreRangeService &#125; <span class="keyword">from</span> <span class="string">'app/estimation-logic/score-range.service'</span>;</div><div class="line"><span class="keyword">import</span> &#123; HttpModule &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</div><div class="line"><span class="keyword">import</span> &#123; BrowserAnimationsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser/animations'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'estimation form'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> fixture: ComponentFixture&lt;EstimationFormComponent&gt;;</div><div class="line">    <span class="keyword">let</span> comp: EstimationFormComponent;</div><div class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        TestBed.configureTestingModule(&#123;</div><div class="line">            <span class="attr">imports</span>: [</div><div class="line">                ReactiveFormsModule,</div><div class="line">                MaterialModule,</div><div class="line">                HttpModule,</div><div class="line">                BrowserAnimationsModule</div><div class="line">            ],</div><div class="line">            <span class="attr">declarations</span>: [</div><div class="line">                EstimationFormComponent</div><div class="line">            ],</div><div class="line">            <span class="attr">providers</span>: [</div><div class="line">                EstimationLogicService,</div><div class="line">                ScoreRangeService</div><div class="line">            ]</div><div class="line">        &#125;);</div><div class="line">        fixture = TestBed.createComponent(EstimationFormComponent);</div><div class="line">        comp = fixture.componentInstance;</div><div class="line">    &#125;);</div><div class="line">    it(<span class="string">'should have cheatingOnPartnerLvl, adrenalineDose, hasSuperHeroFriend as form keys when component initialize'</span>, () =&gt; &#123;</div><div class="line">        comp.ngOnInit();</div><div class="line">        expect(<span class="built_in">Object</span>.keys(comp.estimationForm.value)).to.be.eql([<span class="string">'cheatingOnPartnerLvl'</span>, <span class="string">'adrenalineDose'</span>, <span class="string">'hasSuperHeroFriend'</span>]);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><br>The test passes successfully but did you notice something weird about our dependencies ?<br>We are importing the HttpModule. How is this possible?! Tests are supposed to be isolated.<br>Well, if we take a look at the ScoreRangeService:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreRangeService</span> </span>&#123;</div><div class="line">  <span class="comment">// Http dependency</span></div><div class="line">    <span class="keyword">constructor</span>(private http: Http) &#123; &#125;</div><div class="line">    getRange(score: number): Observable&lt;ScoreRange&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getRanges()</div><div class="line">            .map(<span class="function"><span class="params">res</span> =&gt;</span> res.filter(<span class="function"><span class="params">r</span> =&gt;</span> score &gt;= r.maxScore))</div><div class="line">            .map(<span class="function"><span class="params">res</span> =&gt;</span> res[res.length - <span class="number">1</span>]);</div><div class="line">    &#125;</div><div class="line">    private getRanges(): Observable&lt;ScoreRange[]&gt; &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="string">'../../api/score.range.json'</span>)</div><div class="line">            .map(<span class="function"><span class="params">res</span> =&gt;</span> res.json().ranges <span class="keyword">as</span> ScoreRange[]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>We will notice the dependency on the http service in the constructor, so how can we eliminate that. Certainly, we won’t change our service’s implementation but rather modify how our testing module is providing it by using a fake implementation.<br>How can we create a fake implementation ? This is where Sinon shines ! Told you we will get back to this ;)<br>By using the createStubInstance method of Sinon with no effort. The mock consists of an object with the same keys and signatures as the original implementation so no Angular nor typescript will detect the difference.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ComponentFixture, TestBed &#125; <span class="keyword">from</span> <span class="string">'@angular/core/testing'</span>;</div><div class="line"><span class="keyword">import</span> &#123; EstimationFormComponent &#125; <span class="keyword">from</span> <span class="string">'app/estimation-form/estimation-form.component'</span>;</div><div class="line"><span class="keyword">import</span> &#123; ReactiveFormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</div><div class="line"><span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</div><div class="line"><span class="keyword">import</span> &#123; MaterialModule &#125; <span class="keyword">from</span> <span class="string">'@angular/material'</span>;</div><div class="line"><span class="keyword">import</span> &#123; EstimationLogicService &#125; <span class="keyword">from</span> <span class="string">'app/estimation-logic/estimation-logic.service'</span>;</div><div class="line"><span class="keyword">import</span> &#123; ScoreRangeService &#125; <span class="keyword">from</span> <span class="string">'app/estimation-logic/score-range.service'</span>;</div><div class="line"><span class="keyword">import</span> &#123; createStubInstance &#125; <span class="keyword">from</span> <span class="string">'sinon'</span>;</div><div class="line"><span class="keyword">import</span> &#123; BrowserAnimationsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser/animations'</span>;</div><div class="line"></div><div class="line">describe(<span class="string">'estimation form'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> fixture: ComponentFixture&lt;EstimationFormComponent&gt;;</div><div class="line">    <span class="keyword">let</span> comp: EstimationFormComponent;</div><div class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        TestBed.configureTestingModule(&#123;</div><div class="line">            <span class="attr">imports</span>: [</div><div class="line">              <span class="comment">// Notice that we got rid if the HttpModule !</span></div><div class="line">                ReactiveFormsModule,</div><div class="line">                MaterialModule,</div><div class="line">                BrowserAnimationsModule</div><div class="line">            ],</div><div class="line">            <span class="attr">declarations</span>: [</div><div class="line">                EstimationFormComponent</div><div class="line">            ],</div><div class="line">            <span class="attr">providers</span>: [</div><div class="line">                EstimationLogicService,</div><div class="line">                &#123; <span class="attr">provide</span>: ScoreRangeService, <span class="attr">useValue</span>: createStubInstance(ScoreRangeService) &#125;</div><div class="line">            ]</div><div class="line">        &#125;);</div><div class="line">        fixture = TestBed.createComponent(EstimationFormComponent);</div><div class="line">        comp = fixture.componentInstance;</div><div class="line">    &#125;);</div><div class="line">    it(<span class="string">'should have cheatingOnPartnerLvl, adrenalineDose, hasSuperHeroFriend as form keys when component initialize'</span>, () =&gt; &#123;</div><div class="line">        comp.ngOnInit();</div><div class="line">        expect(<span class="built_in">Object</span>.keys(comp.estimationForm.value)).to.be.eql([<span class="string">'cheatingOnPartnerLvl'</span>, <span class="string">'adrenalineDose'</span>, <span class="string">'hasSuperHeroFriend'</span>]);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><br>While this is a quick way to get tests up and running, it’s not the most powerful one though. Check out the next tip to understand why.</p>
<h2 id="Isolation-Spy-technique"><a href="#Isolation-Spy-technique" class="headerlink" title="Isolation + Spy technique"></a>Isolation + Spy technique</h2><p>We pick up from where we left, excited with our latest discovery createStubInstanc from Sinon. Let’s do the same for our EstimationLogicService:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">describe(<span class="string">'estimation form'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> fixture: ComponentFixture&lt;EstimationFormComponent&gt;;</div><div class="line">    <span class="keyword">let</span> comp: EstimationFormComponent;</div><div class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        TestBed.configureTestingModule(&#123;</div><div class="line">            <span class="attr">imports</span>: [</div><div class="line">                ReactiveFormsModule,</div><div class="line">                MaterialModule,</div><div class="line">                BrowserAnimationsModule</div><div class="line">            ],</div><div class="line">            <span class="attr">declarations</span>: [</div><div class="line">                EstimationFormComponent</div><div class="line">            ],</div><div class="line">            <span class="attr">providers</span>: [</div><div class="line">                &#123; <span class="attr">provide</span>: EstimationLogicService, <span class="attr">useValue</span>: createStubInstance(EstimationLogicService) &#125;,</div><div class="line">                &#123; <span class="attr">provide</span>: ScoreRangeService, <span class="attr">useValue</span>: createStubInstance(ScoreRangeService) &#125;</div><div class="line">            ]</div><div class="line">        &#125;);</div><div class="line">        fixture = TestBed.createComponent(EstimationFormComponent);</div><div class="line">        comp = fixture.componentInstance;</div><div class="line">    &#125;);</div><div class="line">    ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure><br>Imagine now, we are writing a second test to verify that our EstimationLogicService is called when a valid form is submitted:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">    ...</div><div class="line">    it(<span class="string">'should call estimationLogicService when form is valid and submit executed'</span>, () =&gt; &#123;</div><div class="line">        comp.ngOnInit();</div><div class="line">        <span class="comment">// creating a spy to listen for methods/properties invocations</span></div><div class="line">        <span class="keyword">const</span> estimationLogicSpy = spy(estimationLogicServiceStub, <span class="string">'estimate'</span>);</div><div class="line">        comp.estimationForm.setValue(&#123;</div><div class="line">            <span class="string">'cheatingOnPartnerLvl'</span>: <span class="number">1</span>,</div><div class="line">            <span class="string">'adrenalineDose'</span>: <span class="number">50</span>,</div><div class="line">            <span class="string">'hasSuperHeroFriend'</span>: <span class="literal">false</span>,</div><div class="line">            <span class="string">'email'</span>: <span class="string">'tuto@ng.io'</span></div><div class="line">        &#125;);</div><div class="line">        comp.submitForm();</div><div class="line">        expect(estimationLogicSpy.called).to.be.true;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><br>Technically, this would work but in practice you will encounter this error:<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TypeError: Attempted to wrap undefined property estimate as <span class="keyword">function</span></div><div class="line">    at wrapMethod (http://localhost:<span class="number">9876</span>/base/src/test.ts?ae8b7e95826ca6c1ffc4a2d5aadc1d417ff137d0:<span class="number">27854</span>:<span class="number">21</span>)</div></pre></td></tr></table></figure><br>The message explain that we can’t wrap an already wrapped function. Remember we created a stub using createStubInstance then we used a spy which in turn will attempt to create a stub from a stub. Unfortunately, Sinon doesn’t support chaining stubs so what is the solution ?<br>Javascript magic ! This might sound stupid but actually it works fine and it’s also very useful.<br>My advice in such situation is to create fake shell classes, same method signatures but without a body, just like an empty shell. Check out the implementation for FakeEstimationLogicService:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; EstimationInfo &#125; <span class="keyword">from</span> <span class="string">'app/estimation-form/estimation-info.model'</span>;</div><div class="line"><span class="keyword">import</span> &#123; EstimationResult &#125; <span class="keyword">from</span> <span class="string">'app/estimation-form/estimation-result.model'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</div><div class="line">@Injectable()</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">FakeEstimationLogicService</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123; &#125;</div><div class="line">    estimate(formValues: EstimationInfo): Observable&lt;EstimationResult&gt; &#123;</div><div class="line">        <span class="keyword">return</span> Observable.of();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>Then, we go back to our testing module and we make some changes:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">import &#123; FakeEstimationLogicService &#125; <span class="keyword">from</span> <span class="string">'fake/estimation-logic.service.fake'</span>;</div><div class="line">describe(<span class="string">'estimation form'</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> fixture: ComponentFixture&lt;EstimationFormComponent&gt;;</div><div class="line">    <span class="keyword">let</span> comp: EstimationFormComponent;</div><div class="line">    <span class="keyword">let</span> estimationLogicServiceStub: EstimationLogicService;</div><div class="line">    beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        TestBed.configureTestingModule(&#123;</div><div class="line">            <span class="attr">imports</span>: [</div><div class="line">                ReactiveFormsModule,</div><div class="line">                MaterialModule,</div><div class="line">                BrowserAnimationsModule</div><div class="line">            ],</div><div class="line">            <span class="attr">declarations</span>: [</div><div class="line">                EstimationFormComponent</div><div class="line">            ],</div><div class="line">            <span class="attr">providers</span>: [</div><div class="line">                &#123; <span class="attr">provide</span>: EstimationLogicService, <span class="attr">useClass</span>: FakeEstimationLogicService &#125;,</div><div class="line">                &#123; <span class="attr">provide</span>: ScoreRangeService, <span class="attr">useValue</span>: createStubInstance(ScoreRangeService) &#125;</div><div class="line">            ]</div><div class="line">        &#125;);</div><div class="line">        fixture = TestBed.createComponent(EstimationFormComponent);</div><div class="line">        comp = fixture.componentInstance;</div><div class="line">        estimationLogicServiceStub = TestBed.get(EstimationLogicService);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><br>and Voilà ! it works like a charm ;)</p>
<h2 id="AsyncTests"><a href="#AsyncTests" class="headerlink" title="AsyncTests"></a>AsyncTests</h2><p>My last tip is about async tests. It’s a special kind of tests designed for asynchrounous code. What’s special about asynchrounous code? We don’t know exactly when the result will be avaiblable. It’s just a promise that we should examine at the right time otherwise our assertion won’t make any sense.<br>Let’s take the example of our email input. Instead of immediatly checking the input when the user starts typing, we want to give him/her some time to finish up. That should provide a better user experience.</p>
<p>In this case, we will defer checking format by 500 ms using debouceTime operator like the code below:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.estimationForm.controls[<span class="string">'email'</span>].valueChanges</div><div class="line">    .debounceTime(<span class="number">500</span>)</div><div class="line">    .subscribe(<span class="function"><span class="params">res</span> =&gt;</span> <span class="keyword">this</span>.isValidEmail = <span class="keyword">this</span>.estimationForm.controls[<span class="string">'email'</span>].valid);</div></pre></td></tr></table></figure></p>
<p>Let’s write a test for this:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'should display error message when email is not valid'</span>, () =&gt; &#123;</div><div class="line">    comp.ngOnInit();</div><div class="line">    comp.estimationForm.setValue(&#123;</div><div class="line">        <span class="attr">cheatingOnPartnerLvl</span>: <span class="number">2</span>,</div><div class="line">        <span class="attr">adrenalineDose</span>: <span class="number">29</span>,</div><div class="line">        <span class="attr">hasSuperHeroFriend</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">email</span>: <span class="string">'bad_email_format'</span></div><div class="line">    &#125;);</div><div class="line">    expect(comp.isValidEmail).to.be.false;</div><div class="line">    fixture.detectChanges();</div><div class="line">    expect(fixture.debugElement.query(By.css(<span class="string">'.alert.alert-danger'</span>))</div><div class="line">        .nativeElement.innerText).to.be.eql(<span class="string">'Please enter a valid email address'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>When this test executes, our expect assertion will simply happen before debounceTime has finished so it will fail. How can we fix it ? Well, some special tools are required.</p>
<h3 id="fakeAsync-and-tick"><a href="#fakeAsync-and-tick" class="headerlink" title="fakeAsync and tick"></a>fakeAsync and tick</h3><p>fakeAsync and tick are provided by @angular/core/testing. The fakeAsync executes our test in a fake async zone while tick blocks execution and simulates time passage.<br>Let’s see how our test will look like:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'should display error message when email is not valid'</span>, fakeAsync(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    comp.ngOnInit();</div><div class="line">    comp.estimationForm.setValue(&#123;</div><div class="line">        <span class="attr">cheatingOnPartnerLvl</span>: <span class="number">2</span>,</div><div class="line">        <span class="attr">adrenalineDose</span>: <span class="number">29</span>,</div><div class="line">        <span class="attr">hasSuperHeroFriend</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">email</span>: <span class="string">'bad_email_format'</span></div><div class="line">    &#125;);</div><div class="line">    tick(<span class="number">500</span>);</div><div class="line">    expect(comp.isValidEmail).to.be.false;</div><div class="line">    fixture.detectChanges();</div><div class="line">    expect(fixture.debugElement.query(By.css(<span class="string">'.alert.alert-danger'</span>))</div><div class="line">        .nativeElement.innerText).to.be.eql(<span class="string">'Please enter a valid email address'</span>);</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<h3 id="async-and-whenStable"><a href="#async-and-whenStable" class="headerlink" title="async and whenStable"></a>async and whenStable</h3><p>Although the syntax is a little different but the purpose stays he same. The async wraps the code in an async zone while whenStable will only execute when all pending promises are resolved. This is a rewrite of the previous test using async and whenStable:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'should display error message when email is not valid using async'</span>, <span class="keyword">async</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    fixture.whenStable().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        expect(comp.isValidEmail).to.be.false;</div><div class="line">        fixture.detectChanges();</div><div class="line">        expect(fixture.debugElement.query(By.css(<span class="string">'.alert.alert-danger'</span>))</div><div class="line">            .nativeElement.innerText).to.be.eql(<span class="string">'Please enter a valid email address'</span>);</div><div class="line">    &#125;);</div><div class="line">    comp.ngOnInit();</div><div class="line">    comp.estimationForm.setValue(&#123;</div><div class="line">        <span class="attr">cheatingOnPartnerLvl</span>: <span class="number">2</span>,</div><div class="line">        <span class="attr">adrenalineDose</span>: <span class="number">29</span>,</div><div class="line">        <span class="attr">hasSuperHeroFriend</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">email</span>: <span class="string">'bad_email_format'</span></div><div class="line">    &#125;);</div><div class="line">&#125;));</div></pre></td></tr></table></figure></p>
<h3 id="jasmine-done"><a href="#jasmine-done" class="headerlink" title="jasmine done"></a>jasmine done</h3><p>While the previous tools were provided by Angular, Jasmine also provides its own mecanism to test asynchronous code. It’s based on a function usually called done and passed into the parameters of the test. This function should be called when all async processing is complete like the following example:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'should display error message when email is not valid using done'</span>, (done) =&gt; &#123;</div><div class="line">    comp.ngOnInit();</div><div class="line">    comp.estimationForm.setValue(&#123;</div><div class="line">        <span class="attr">cheatingOnPartnerLvl</span>: <span class="number">2</span>,</div><div class="line">        <span class="attr">adrenalineDose</span>: <span class="number">29</span>,</div><div class="line">        <span class="attr">hasSuperHeroFriend</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">email</span>: <span class="string">'bad_email_format'</span></div><div class="line">    &#125;);</div><div class="line">    fixture.whenStable().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        expect(comp.isValidEmail).to.be.false;</div><div class="line">        fixture.detectChanges();</div><div class="line">        expect(fixture.debugElement.query(By.css(<span class="string">'.alert.alert-danger'</span>))</div><div class="line">            .nativeElement.innerText).to.be.eql(<span class="string">'Please enter a valid email address'</span>);</div><div class="line">    &#125;);</div><div class="line">    done();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><br>Like demonstrated above, there are 3 different approaches to test async code, it’s up to the developer to choose. Personally, my favorite is the first one with fakeAsync and tick because it make my code look synchronous therefore easier to understand and debug.</p>
<p>This is the end of this first post on Angular journey, stay tuned for what’s next !</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Since Angular’s official release in September 2016, a lot of ink has been spilled over the ground-up rewrite of AngularJS.&lt;br&gt;While the quantity of informations is huge, it seldom addresses tips on how to solve specific problems. This has led me to write this serie of posts about my journey with Angular.&lt;br&gt;
    
    </summary>
    
    
      <category term="Angular" scheme="https://mseknibilel.github.io/tags/Angular/"/>
    
      <category term="Testing" scheme="https://mseknibilel.github.io/tags/Testing/"/>
    
  </entry>
  
  <entry>
    <title>Agile management, it&#39;s all about trust !</title>
    <link href="https://mseknibilel.github.io/2017/06/18/agile-management/"/>
    <id>https://mseknibilel.github.io/2017/06/18/agile-management/</id>
    <published>2017-06-18T13:08:03.000Z</published>
    <updated>2017-06-18T13:17:37.445Z</updated>
    
    <content type="html"><![CDATA[<p>Since the beginning of time, hierarchy existed almost everywhere from small families to large companies and even in criminal organizations. Wherever you go, there is someone in charge of taking decisions while others simply execute them. It seems like a proper way to instaure order and move forward. However, i think we haven’t taken a moment to ask ourselves if this is the best way to do so?<br><a id="more"></a><br><div class="figure nocaption center" style="width:;"><img class="fig-img" src="https://i.imgur.com/3JgBE7A.png" alt=""></div></p>
<p>I believe that great leaders with outstanding vision are a myth. Such burdens of command can’t lie on the shoulders of one human. It’s simply too much even if they have the best management degrees or an impressive charisma. This is probably why some fields tried to solve this issue by following different approaches. For example, in the army, every general has his general staff for advising. In politics, presidency is limited to a couple of years and inside an airplane cockpit, we invented the co-pilot. I’m no expert in these domains so i won’t talk about them but what i would really like to talk about is our software industry.</p>
<p>Today’s most existing companies share the same management model. They all start by a CEO and his advisors at the top of the pyramid. Then, different departments form the body of the pyramid. They are usually identified by their core business like marketing, human resources, … In every department, there is leader and perhaps deputy leaders. They shape the management layer of that department. At the bottom of the pyramid, we find the execution layer made of developers, quality assurances, business analysts, system administrators, …<br>This traditional hierarchy looks reasonable at first glance but let’s dive deeper in how it works.</p>
<p>Usually, the CEO shares his decisions with the advising board. Once validated, he orders department leaders to follow these decisions in order to realize his vision for the company. In their turn, department leaders transmit orders to the staff below them until it reaches the bottom of the pyramid. It seems like a simple process but actually it’s not. Because CEO orders have to go through multiple middle layers to get to execution teams, they risk being altered unintentionally ( misunderstandings or poor communication) or even intentionally (conflict with personal interests and political choices). This usually happens because theory doesn’t take in consideration the human factor in the equation of the right management model.<br>Furthermore, it gets even worse when progress reports have to be delivered. For example, let’s suppose that developing team is really behind schedule, the leader will likely hide or underestimate this fact in his progress report because his bonus depends on it. This wrong progress report is then submitted to the above layers where every manager will likely do the same by hiding or diminishing the gravity of the problem. By the time progress reports reach the CEO’s desk, they are all displaying promising data so he plans his next steps using these incorrect informations thus driving projects to failure. Eventually, the more layers a company has, the less transparent it will be. This forms major obstacles for the company to reach its maximum performance, so  how can we solve this issue? Easy, it’s through agile management.</p>
<p>First, in agile management, burdens of command must be dispatched, companies shouldn’t have a single point for taking decisions but multiple points. This helps avoid centralization in favor of decentralization. When responsibilities are shared, risks are too which means they are reduced therefore increasing the chances of success. Eventually, agile describes every problem as everyone’s problem and the team’s main responsibility is to work together on solving it.</p>
<p>Now, how far should a company go to distribute the authority of taking decisions? This question brings us to the second step to build better management and the answer is as far as it takes. This means that good managers should empower even the smallest employee at the bottom of the pyramid. Why ? because after all he is producing the real added value. Giving these employees orders will give them a sense of babysitting or perhaps worse submission. In both cases, motivation is far away from its highest levels unlike getting them involved in the process of making decisions where not only his motivation and performance will increase but will also help find the best decisions to take since he is the closest to the manufactured product.<br>Most companies ignore this fact thinking that their success is related only to the CEO’s decisions. I personally find it hard to imagine that the farthest person from the product is the one who is best fit to take decisions about it.<br>However, stretching out the commanding responsibility doesn’t mean we should have more managers, it only implies that employees will have enough power to decide on their own the best way to auto-organize themselves in order to accomplish their tasks. This freedom of choice is a reflection of trust and space for employees to exercise their management skills.</p>
<p>Finally, if every team becomes self organized, what is the outcome of the current managers? where do they fit in this new company culture?<br>The role of managers should change from giving orders to supervising. They no longer need to tell people what to do, instead, they should supervise progress and rise alerts to the team about impediments and urgent demands. This transforms the traditional bossing relationship between managers and their teams to cooperation and leadership.<br>Furthermore, because they don’t need to spend too much time coming up with new ideas for the product, more time will be available for managers to explore new markets and possible customers. They can rely on new market needs to select the best decisions suggested by employees to enhance the product. Eventually, instead of driving a product they don’t know too much about, they drive more accurate suggestions about this product to respond to customer requests.<br>These three points are pillars to agile management and enterprise liberation. It’s only by removing middle layers that execution layers can be closer to the customer. The meaning of removing is not firing people but adapting a real flat hierarchy based on cooperation and communication instead of orders and processes.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Since the beginning of time, hierarchy existed almost everywhere from small families to large companies and even in criminal organizations. Wherever you go, there is someone in charge of taking decisions while others simply execute them. It seems like a proper way to instaure order and move forward. However, i think we haven’t taken a moment to ask ourselves if this is the best way to do so?&lt;br&gt;
    
    </summary>
    
    
      <category term="agile" scheme="https://mseknibilel.github.io/tags/agile/"/>
    
  </entry>
  
  <entry>
    <title>Archivator .. to archive all those old files</title>
    <link href="https://mseknibilel.github.io/2017/06/18/archivator/"/>
    <id>https://mseknibilel.github.io/2017/06/18/archivator/</id>
    <published>2017-06-18T12:57:52.000Z</published>
    <updated>2017-06-18T13:18:53.852Z</updated>
    
    <content type="html"><![CDATA[<p>Cleaning up old files is an incredebly annoying operation. It’s time consuming and might result into errors due to repeating the same actions all the time. However, it’s necessary to remove old files in order to keep your folder clear and gain free space on your hard disk.<br><a id="more"></a><br><div class="figure center" style="width:;"><img class="fig-img" src="https://i.imgur.com/Bf3jTsT.jpg" alt=""></div><br>The best solution to clean up old files while saving time and avoiding mistakes is to automate the process using a sophisticated program or a simple script.<br>For this occasion, i’m glad to present Archivator, my script for archiving old files. It searches a particular folder to compress old files using 7zip then move them to another directory. It simple to understand and easy to customize.</p>
<p> Follow these steps to make use of it:</p>
<ol>
<li>Download 7Zip from this the official <a href="http://www.7-zip.org/" target="_blank" rel="external">link</a></li>
<li>Install it to your C:\Program Files\7-Zip\</li>
<li>Download Archivator from my <a href="https://github.com/mseknibilel/Archivator/blob/master/Archivator.ps1" target="_blank" rel="external">github</a></li>
<li>Open Windows Powershell and update the execution policy using this command: set-executionpolicy bypass</li>
<li>Navigate to where archivator script have been saved using cd command in windows powershell.</li>
<li>Archivator takes command lines in this format</li>
</ol>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.\Archivator -FilesPath <span class="string">"PathToYourFiles"</span> -FileExtension <span class="string">"TypeOfFileToArchive"</span> -DaysToKeep X -ArchivePath <span class="string">"PathToMoveZippedFilesInto"</span></div></pre></td></tr></table></figure>
<p>For example, this command will zip all txt files in D:\Extracts older than from J-3 and move them to D:\Extracts\Archive\dd-MM-YY</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.\Archivator -FilesPath <span class="string">"D:\Extracts\"</span> -FileExtension <span class="string">"*.txt"</span> -DaysToKeep <span class="number">3</span> -ArchivePath <span class="string">"D:\Extracts\Archive"</span></div></pre></td></tr></table></figure>
<ol>
<li>You can copy your command and paste it in a bat file that you can later use to create a scheduled task inside the task scheduler.</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Cleaning up old files is an incredebly annoying operation. It’s time consuming and might result into errors due to repeating the same actions all the time. However, it’s necessary to remove old files in order to keep your folder clear and gain free space on your hard disk.&lt;br&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://mseknibilel.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Waterfall is that you?</title>
    <link href="https://mseknibilel.github.io/2017/06/18/waterfall-is-that-you/"/>
    <id>https://mseknibilel.github.io/2017/06/18/waterfall-is-that-you/</id>
    <published>2017-06-18T12:56:47.000Z</published>
    <updated>2017-06-18T13:18:33.703Z</updated>
    
    <content type="html"><![CDATA[<p>IT projects have some similarities with industrial ones like budgets, deadlines but also have its differences like its flowness and unpredictable complexity. Many ways exist today to drive this kind of projects, perhaps the most used one is Waterfall methodology. It has been the standard for managing software development projects since it’s creation in the mid 20th century. However, the outcome was very disappointing.<br><a id="more"></a></p>
<div class="figure nocaption center" style="width:;"><img class="fig-img" src="https://i.imgur.com/Ay5FeM4.png" alt=""></div>
<p>Less than 26% of projects were successful according to the chaos report by the Standish Group. More than 70 % was either challenged (budget excess, descoping requirements, …) or simply failed. This was a call for change to a better way. Agile methodology came to the world in february 2001 after publishing lightweight development methods known as the Manifesto for Agile Software Development.<br>It took it some time but eventually agile was considered as a serious alternative to waterfall. Agile’s most used implementation Scrum was introduced by Ken Schwaber and Jeff Sutherland as an agile framework made of 3 simple concepts: events, roles and artifacts. If used correctly, Scrum can raise team performance, minimize risk and enhance return on investment (ROI). However changing to scrum is bit more difficult than people think, many obstacles can slow this transformation and perhaps even give birth to a hybrid agile waterfall methodology.<br> So how was this new concept embraced ? Is there a danger if it’s wrongfully applied? And how should the real scrum be?</p>
<p> Most teams today claim they are agile or at least they want to be but they are actually not.<br>Why? Because applying scrum is not easy especially when you have tons of processes and traditions like in big companies. There are many symptoms to this scrum illusion. First, decorating the old process symptom, most teams tend to rename old ceremonies using scrum words to make it sound “scrumish”. For instance, report status meeting is transformed into daily meeting, team meeting is used for retrospectives, … Well, it’s a good step toward scrum but it’s not enough. The content of the meeting, its attendees still need to change if we want to work in scrum. For example, daily meetings should be informative short meeting to discuss day to day plans and check progress between scrum master, dev team and product owner. It’s not about reporting to the manager, or discussing a technical solution.</p>
<p>Second symptom is the role confusion. In scrum, only three roles exist: Product owner, scrum master and dev team. However, in these teams, you still hear about team leader, project manager, deputy team leader, …because the company process didn’t change when she adapted scrum. This is a real obstacle because it holds scrum from achieving its goal by building a cross functional, autonomous and self organizing team. Team leader, business analyst, senior developer, database administrator,  QA … they form all together the dev team to work in cooperation and create a product that meets the product owner’s expectations. For example, instead of having a team of business analysts working seperatly to write specifications therefore creating an intermediate layer between the developers and product owners, they should be integrated within dev teams to work closely with developers, QAs to better understand product requirements and figure out the best way to meet them.</p>
<p> Changing to Scrum leads to a changing the management culture from decisions created by top executives  and executed by the team to decisions made by the team members and validated by executives reflecting a real flat hierarchy where everyone’s opinion matters. This doesn’t mean loss of authority but more about cooperation rather than ordering. It’s necessary to form employees about their new role, how it’s really about complementing and not in conflicting with others.<br>The last symptom is known by my PO is MIA or when product owner doesn’t attend scrum events, takes a long time before giving feedbacks and doesn’t accept estimation in complexity points. This usually happens when the product owner is high level management that simply does not have the time to be with the team or he is not really into the scrum process. In both cases, it creates a negative impact on the team because they can’t understand correclty the required features, get feedbacks regularly and the worst thing is using time estimations.<br>Estimating a task in time is guessing how much time it needs to be done. This method is known for its ineffecienty and cause of frustration due to micro-management. In scrum, estimation is about complexity rather than time. It’s really hard to predict time estimation of a given task because factors like performance, design, tests … are not obvious in the beginning. Unfortunatly, this is a bit difficult to accept by some product owners because unlike time estimation, complexity estimation can’t be translated to cost which means fear from budget excess or feature descoping. This type of product owners are more used to waterfall methodology where they try to push every possible feature they can think of before closing the contract. Time has proven how wrong this approach is in the software development industry. Time framing features often leads to bad quality products, missed deadlines and budget excess.<br>The agile manifesto states customer collaboration over contract negociation where the customer sorts his features by most added value to create the product backlog. He then meets with the dev team to define which items the team plans to deliver during the sprint according to the team velocity. Finally, he works closely with the dev team by providing recurrent feedbacks about the product to make sure requirements are well understood. This cycle is repeated over and over until the end of the budget. Because the product owner chose to deliver his most prioritized items first, the outcame is always a high quality product with maximum ROI. It’s true that some features might be descoped but if this happens it’s not because a deadline was missed but because some other features were just more important to have.</p>
<p>The product owner is a key role in scrum process and should not be taken lightly. It’s a full time job that includes prioritizing features, creating product backlogs and  providing feedbacks on product increments. There can only be one product owner, he might share some responsibility but decisions must come always from the lead product owner to avoid confusion and missunderstanding.</p>
<p>These were the three symptoms describing an ill scrum process. It has been bent to make a better picture but not a better result. Scrum works and the chaos report above is the best proof for that, but if you really want to increase your performance and maximize your ROI, you should try to fully adapt scrum.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IT projects have some similarities with industrial ones like budgets, deadlines but also have its differences like its flowness and unpredictable complexity. Many ways exist today to drive this kind of projects, perhaps the most used one is Waterfall methodology. It has been the standard for managing software development projects since it’s creation in the mid 20th century. However, the outcome was very disappointing.&lt;br&gt;
    
    </summary>
    
    
      <category term="agile" scheme="https://mseknibilel.github.io/tags/agile/"/>
    
  </entry>
  
  <entry>
    <title>Who is this person so called scrum master?</title>
    <link href="https://mseknibilel.github.io/2017/06/18/who-is-this-scrum-master/"/>
    <id>https://mseknibilel.github.io/2017/06/18/who-is-this-scrum-master/</id>
    <published>2017-06-18T12:52:25.000Z</published>
    <updated>2017-06-18T13:18:24.425Z</updated>
    
    <content type="html"><![CDATA[<p>In scrum, only three roles exist: Product owner, Dev team and the scrum master.<br>While the product owner is responsible for driving the project and the dev team is in charge of realizing it, no one really knows exactly what the scrum master’s role is. Is he the one who animates the daily meetings, the poker plannings and retrospectives ? Or may be he is manager of the dev team?<br><a id="more"></a></p>
<div class="figure nocaption center" style="width:;"><img class="fig-img" src="https://i.imgur.com/lCYMhom.png" alt=""></div>
<p>Well he is certainly not the manager of the dev team because he doesn’t make decisions on their behalf. He also doesn’t assign tasks to dev team nor the dev team report to him in anyway. This is because the dev team have to be self organized. It’s in their responsibility to find the best way to make good decisions and increase their productivity.</p>
<p>Okay, how about animating scrum ceremonies ? Also false, in scrum, the dev team must have all the necessary skills to be autonomous. if we let the scrum master do the daily meetings for instance, a dependency on that person is created and may affect the team if he is not able to do the ceremony.</p>
<p>The real scrum master’s role is not obvious because it’s done behind the scenes. The scrum master has a key role of protecting the agile process from any violation. He is also the sworn enemy to all obstacles that may stand between the dev team and their best performance.</p>
<p>Whether it’s coming from the product owner, the dev team or any other person, a good scrum master should alert about violations of the scrum process. For example, an item is considered done while it was not yet deployed on a server hence not respecting the definition of done. Another violation is when the product owner asks for too many items in a single sprint. Even if the dev team is on fire, a wise scrum master should be realistic and avoid overloading the dev team. Remember, partially done items are considered impediments to the next sprint especially if they were deprioritized. </p>
<p>Besides watching out for violations, the scrum master must also watch over the dev team and even the product owner. His presence is essential to detect any possible obstacles such as lack of interest in the daily meeting, little agreement on estimations or even conflicts between colleagues. </p>
<p>Yes, it may sound weird and funny but the scrum master should play the role of shrink. He needs to have great social skills to read between the lines, decrypt the body language and analyse behaviour to understand what’s going wrong. As little as they might be, the scrum master should resolve these obstacles quickly to help his team move forward. However, solving issues must not by by handing over solutions, it should rather be by driving the team to find the best solution by themselves using creativity and diplomacy. This is because giving solutions right away causes dependencies may be even laziness unlike encouraging people to question themselves which dedicates responsibility and self improvement.</p>
<p>For instance, lack of interest in a certain ceremony means that the team has lost motivation which is bad for performances. So what’s wrong? Many reasons jump in such as: is the daily meeting done right ? Is everyone talking to the others or did it become a regular status report meeting ? </p>
<p>A bad approach will be “ you are doing your daily meeting wrong. It’s taking too much time bla bla bla. You must do this, this and this instead…” Notice how the scrum master here sounds like managers when he bosses people around. This is definitely not the best way to go.<br>The right approach will be to just ask the right question and start the discussion sparkle. For example: do you think your daily meeting is done right ? What don’t you like about your daily meeting ? How can you make it more useful ?<br>The scrum master has to make sure that this discussion leads to changes crowned by real actions. By doing so, he solves obstacles without creating dependencies but by coaching teams about continuous improvement. </p>
<p>Beside being the shrink of the team and his coach, the scrum master has one last role to play: Inspiring mentor. By playing the guardian of the scrum methodology, the scrum master should set an example in how to be scrum compliant.<br>Scrum masters have to be very careful with this point. If the scrum master does not respect the agile manifesto, how could you expect others to do so ?<br>My scrum master once asked me how many days ii need to finish feature A that i knew very little about. I couldn’t really give a proper answer but i felt forced to give an over estimation because he kept insisting.<br>You see here this is really not how scrum master should behave. It’s more like management or micro management. By doing such actions, the scrum master looses credibility. Inspiring is by making people listen to what you say, motivate them to follow you to the best path. This is not easy because it needs the scrum master to be perfect in every move he does and every word he says but it’s also not impossible.<br>It’s by staying behind the scenes that the scrum master gets a better view to analyse the situation, think correctly and act accordingly. It’s also important to stay neutral and not take anyone’s side unless that side is the right one.</p>
<p>Today, i think scrum master is more about personality rather than process. He should be a person who likes to serve others, protect and lead them to the right path. But unlike a classic leader who is there to get credits, the scrum master needs to stay behind the scene while the dev team/product owner is congratulated.</p>
<p>You can’t expect anyone to be good at such position but if you find a successful dev team, it’s very much likely that there is a skilled scrum master behind them.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In scrum, only three roles exist: Product owner, Dev team and the scrum master.&lt;br&gt;While the product owner is responsible for driving the project and the dev team is in charge of realizing it, no one really knows exactly what the scrum master’s role is. Is he the one who animates the daily meetings, the poker plannings and retrospectives ? Or may be he is manager of the dev team?&lt;br&gt;
    
    </summary>
    
    
      <category term="agile" scheme="https://mseknibilel.github.io/tags/agile/"/>
    
  </entry>
  
  <entry>
    <title>Traveler&#39;s guide to Canada And United States</title>
    <link href="https://mseknibilel.github.io/2017/06/18/traveler-guide-to-eastern-canada-and-us/"/>
    <id>https://mseknibilel.github.io/2017/06/18/traveler-guide-to-eastern-canada-and-us/</id>
    <published>2017-06-18T12:36:14.000Z</published>
    <updated>2017-06-18T13:18:49.518Z</updated>
    
    <content type="html"><![CDATA[<p>This guide is destined to help people visit the eastern coasts of Canada and United States. It will cover the following Cities: <strong>Montreal</strong> - <strong>Ottawa</strong> - <strong>Toronto</strong> – <strong>Niagara Falls</strong> (Canadian &amp; US Sides) - <strong>Chicago</strong> - <strong>Miami</strong> - <strong>Washington DC</strong> - <strong>New York</strong>. I will focus more on what you need to bring and how to travel from one place to another. I will only be suggesting how much time to spend in every town but it’s really up to you to choose what to see and do in every town. Finally, this guide is based on my personal experience and I’ll be happy to answer any questions you might have. If you like it, share it!<br><a id="more"></a></p>
<div class="figure center" style="width:;"><img class="fig-img" src="https://i.imgur.com/smNRznV.jpg" alt="On my road trip ! NiagaraFalls Rainbow Bridge"><span class="caption">On my road trip ! NiagaraFalls Rainbow Bridge</span></div>
<h1 id="Visas"><a href="#Visas" class="headerlink" title="Visas"></a>Visas</h1><p>Paperwork! Yey, who loves them? No one but it’s a necessary evil!</p>
<p>If you are sure you don’t need a Visa or any special documents, you can skip this part directly to very important point (right below United States visa section). Please advise that even if you don’t need a visa, you might require special travel documents to present to custom boarders at the airport. These are the links to determine if you need to have a Visa or any other special travel document to enter Canada &amp; USA:</p>
<ul>
<li><a href="http://www.cic.gc.ca/english/visit/visas.asp" target="_blank" rel="external">Canada</a></li>
<li><a href="http://travel.state.gov/content/visas/english/visit/visa-waiver-program.html" target="_blank" rel="external">United States</a></li>
</ul>
<h2 id="Canadian-Visa"><a href="#Canadian-Visa" class="headerlink" title="Canadian Visa"></a>Canadian Visa</h2><p>Your visa request can be created and submitted online but you still have to show up in person to do 3 important things:</p>
<ol>
<li>Give fingerprints &amp; have your personal picture taken.</li>
<li>Passeport Deposit</li>
<li>Passeport Retrievel (Can be send to you by post office for extra fees)</li>
</ol>
<p>First, you need to create an immigration account using one of these links:</p>
<ul>
<li><a href="http://www.cic.gc.ca/english/visit/apply-how.asp" target="_blank" rel="external">English</a></li>
<li><a href="http://www.cic.gc.ca/francais/visiter/demande-comment.asp" target="_blank" rel="external">French</a></li>
</ul>
<p>Then, you start by creating a visa request where you fill up basic information about yourself (name, age, employment status…) and trip plans. Once you finish filling up the forms, you will be prompted to send a list of documents (picture, passport, salary slips …). After sending documents, you can set up a date to have your fingerprints and picture taken.<br>Please note that additional documents are often needed, so it’s very important to keep track of your request status through your immigration account. Keep in mind that your visa request processing is suspended every time additional documents are needed. Visa request processing is resumed only after sending the required documents.<br>Finally, when a decision about your visa request is made, you will be asked to deposit your passport. You can choose if you want to come back and collect it in person or have them send it to you through post office.<br>You should expect yourself to stay without a passport for at least 3 days.</p>
<h2 id="United-States-Visa"><a href="#United-States-Visa" class="headerlink" title="United States Visa"></a>United States Visa</h2><p>This visa is pretty straight forward: You pay, you assure and you get it</p>
<p><strong>You pay:</strong> You start by creating an account through this <a href="https://ceac.state.gov/genniv/and" target="_blank" rel="external">link</a> fill up a couple of forms to describe yourself and travel plans. A visa request is created using the supplied information.</p>
<p>Your visa request isn’t enough so you will have to attend an interview with an immigration officer. To schedule this interview, you have to pay fees. Two ways are provided: credit card or wiring money to a bank account. I don’t know why my credit card was not accepted, so I did the money transfer thing. After 3 days, your transfer will be confirmed and you will be able to set an appointment.</p>
<p><strong>You assure:</strong> This step is all about inspiring confidence. The immigration officer will be deciding if you are eligible for a US visa or not so do everything you can to assure him that you are planning on leaving the US when your trip is over. If you think that a return ticket and a hotel reservation is enough, you should think again. The most important thing you need to have is deep roots in your current country: stable job, stable financial status, non-criminal activities! You don’t have to do this interview in English, usually an alternative language is possible. Use simple words, smile and don’t make things complicated.</p>
<p><strong>You get:</strong> At the end of the interview, the immigration officer will inform you about his decision and will take keep passport. Expect to receive it by post office after a couple of days.</p>
<p><strong>Very Important:</strong> Canadian and USA visas do not guarantee your entrance to its corresponding countries. There is a second check at the airport, if you fail the check, you will not be granted access.<br>Again, upon arrival to Canada and the United States, custom boarders will check your passport and Visas. A couple of questions will be asked, always smile and reply with simple words!<br>The two most important questions are:</p>
<ul>
<li><p>How long do you intend to stay? =&gt; Your return airplane ticket is a big plus to your answer.</p>
</li>
<li><p>Where are you staying? =&gt; Give him a valid address, Do not reply with I’m staying at a friend’s place, Give him a valid address!</p>
</li>
</ul>
<h1 id="Must-have"><a href="#Must-have" class="headerlink" title="Must have"></a>Must have</h1><h3 id="Sim-Card-For-United-States"><a href="#Sim-Card-For-United-States" class="headerlink" title="Sim Card [For United States]"></a>Sim Card [For United States]</h3><p>Having a US phone number is a good thing in my opinion but what’s even more important is having internet access. It just makes your trip so much easier especially if you are traveling alone. Some people might rely on public Wi-Fi access, I did that while I was in Canada and it was okay. I recommend investing in a sim card with internet access and you will see the benefits of this must have as you read my guide.<br> Many prepaid sim card offers are available on the internet, I personally chose this offer from ready sim:</p>
<ul>
<li>Duration: 14 days</li>
<li>Unlimited US nationwide talk</li>
<li>Unlimited International SMS</li>
<li>1GB of Data through unthrottled 4G</li>
<li>35$ + shipment fees only!</li>
</ul>
<p>More offers are available through this <a href="http://www.readysim.com/shop.html" target="_blank" rel="external">link</a></p>
<p>Please note that shipment takes up to one month. Furthermore, your sim activation is done instantly through a simple step: After entering the US, send a text message containing your current location’s 5 digit US Zip code to 7850.<br>More info can be found <a href="http://www.readysim.com/how-it-works.html" target="_blank" rel="external">here</a></p>
<h3 id="Trip-Advisor-city-guides"><a href="#Trip-Advisor-city-guides" class="headerlink" title="Trip Advisor city guides"></a>Trip Advisor city guides</h3><p>This is any traveler’s hero!<br>Many of you might have heard of Trip Advisor, it’s a website destined to describe every city’s best attractions, restaurants, shows …<br>However, few are those who know that there is a phone app called City Guides Catalog from Trip Advisor which provides similar content to the website but just for a specific destination. It does not need internet connection and besides attractions, restaurants… It includes an offline map for the town you are planning to visit! Yep, it’s an offline map, no internet connection is needed, just activate your phone GPS and you are good to go!</p>
<p>For android phones: Open the play store and search for TripAdvisor City Guides Catalog app. Download and install it. Launch the app and browse the city catalog. It’s displayed by continents. Choose the city you are planning to visit and download the guide. Wait, it’s not over yet, once the city guide is downloaded, open the city guide and you will be prompted to download the full content of the guide. It’s only after finishing the full download that the guide can be fully used offline.<br>For IPhones: Buy yourself an android phone and revert to android section :D .. Just kidding, same instructions as android should be followed to download city guides from your traditional app store.</p>
<p>Finally, it’s a good habit to open up the city guides, select which attractions/restaurants/activities you would like to do and save your hotel address.<br>Desired activities, restaurants, hotel address will be displayed with a special icon on the offline city map giving you more control over your trip plans.</p>
<h3 id="Google-Offline-map"><a href="#Google-Offline-map" class="headerlink" title="Google Offline map"></a>Google Offline map</h3><p>Trip advisor city guides cover a lot of cities around the world but not all of them. For example, Niagara Falls didn’t have a city guide. Some people might choose traditional paper maps but I hardly found ones that cover the area in details. Most of them focus on attractions sites … duh tourist maps!<br>To overcome this obstacle, there are google offline maps. It’s basically google maps but you can take snapshots (not screen shots) to use when internet is not available.<br>If you want to take a snapshot, please follow the instructions described in this <a href="https://support.google.com/gmm/answer/3273567?hl=en." target="_blank" rel="external">link</a></p>
<p>I must say that it’s a nice tool but multiple snapshots are needed for more accuracy. To see if you have enough snapshots, turn off your internet connection and see if you can figure out your way.</p>
<h3 id="Additional-source-of-energy-for-your-phone"><a href="#Additional-source-of-energy-for-your-phone" class="headerlink" title="Additional source of energy for your phone"></a>Additional source of energy for your phone</h3><p>This is traveling 101! Because Camera, GPS, and internet are running during all day, your phone battery will be drained fast. A second power source is necessary. Whether you choose a power bank, a second battery or charge your phone while having a coffee at McDonalds, it’s really up to you.<br>In my case, I had a second battery and a battery charger. My daily routine was to keep my second battery being charged while I’m out exploring. I usually go back around mid-day to have a snack and switch batteries. </p>
<h3 id="Walking-Running-shoes"><a href="#Walking-Running-shoes" class="headerlink" title="Walking/Running shoes"></a>Walking/Running shoes</h3><p>This is a must! I always considered my trip as an adventure more than a vacation. I would always choose to walk rather than take public transportations. Finally, there is no better witness to how much you saw nor what you have done than the blisters covering your feet at the end of the journey.<br>Walking shoes are light, comfortable and a must in this journey.</p>
<h3 id="Plug-Adapter"><a href="#Plug-Adapter" class="headerlink" title="Plug Adapter"></a>Plug Adapter</h3><p>This is North America folks! They have their own special electricity plugs, don’t forget to get adapters if you are coming from another country :)</p>
<h1 id="Planning-it-foward"><a href="#Planning-it-foward" class="headerlink" title="Planning it foward"></a>Planning it foward</h1><p>I was on an adventure for 21 days and got to visit 9 major cities at a cost between 1500€ and 2000€. You might be wondering how come it’s so cheap! Well, I bought most of my tickets (airplane, bus &amp; hotels) at least 3 months earlier. In this section, I’m going to talk about reservations for airplanes and hotels/hosts.</p>
<h3 id="Airplane-tickets"><a href="#Airplane-tickets" class="headerlink" title="Airplane tickets"></a>Airplane tickets</h3><p>Whether it’s a national or an international flight, you should always use flight comparators. They guarantee you the best deals. However, you need to keep in mind the following points:</p>
<ul>
<li>Adjust your flight comparator to your credit card type to get the real price (first displayed price doesn’t take into consideration if you have a normal Visa card or a premier card). Airplane ticket price are more likely to increase when your credit card is a premium one.</li>
<li>Always favor national flight over international ones because of high taxes on international flights.</li>
<li>When buying tickets, check out airport locations (both departure and arrival), don’t get fooled by the low price very quickly. Some airports offer very low prices because they are far away from the city center. For instance, let’s say we are going to Washington DC, flight comparator displays two flights. First one lands in Baltimore and costs 55€, the second lands in Ronald Reagan airport and costs 80€. There is a considerable difference but one should be wise and check things out on google maps. Baltimore airport is 1 hour drive away from Washington and no public transportation is available while RR airport is accessible by metro lines!</li>
<li>National flights include cabin luggage in ticket prices. If you have more luggages, you will have to pay more. In my case, I had a 50L backpack. Its size exceeded the standard cabin size but no one actually cared in the United States! youhooo, extra economy :)</li>
<li>Sometimes, non-direct flights are cheaper than direct ones. This happens a lot in the United States. Atlanta airport is a big hub for planes where you switch from one terminal to another very easily. In my trip, I switched planes twice in that airport because it was cheaper. However, to avoid any bad surprises, always plan to have an hour difference between your first and second flight. For instance, let’s say you are flying from Chicago to Miami through Atlanta airport, if your plane from Chicago arrives to Atlanta at 10 am, you should book planes that leave from Atlanta to Miami starting from 11 am.</li>
</ul>
<h3 id="Bus-tickets"><a href="#Bus-tickets" class="headerlink" title="Bus tickets"></a>Bus tickets</h3><p>Traveling by bus in Canada and US is very popular. There are many bus companies and I chose MegaBus. Ticket prices are low especially if you buy them in advance and service is good (Wi-Fi, electric plugs, rest rooms, decent seats …). MegaBus operates in both Canada &amp; US. These are the links:</p>
<ul>
<li><a href="https://ca.megabus.com/landingcanada.aspx?return=/default.aspx" target="_blank" rel="external">MegaBus Canada</a></li>
<li><a href="http://us.megabus.com/" target="_blank" rel="external">MegaBus United States</a></li>
</ul>
<p>To use MegaBus service, you need to buy your ticket online. You should arrive at the station at least 15 minutes before departure time. The driver will take your luggage after validating your reservation number. Do not forget to mark MegaBus station on your trip advisor city map. I always found that wasting 30 minutes to visit the location of the stop before departure day helps avoid bad surprises.</p>
<h3 id="Sleeping-arrangements"><a href="#Sleeping-arrangements" class="headerlink" title="Sleeping arrangements"></a>Sleeping arrangements</h3><p>When you are on an adventure, you are not really looking for the luxury in hotels and bed. You should be more looking forward to exploring new places and cultures. This is why I chose to do my trip Couchsurfing and Airbnb style.</p>
<p>Couchsurfing: This concept has been there for quite a while now. It consists on staying at local people’s houses. Whether on a couch or in a private room, the goal is to meet new people and get to know the real daily life of the city. Do not confuse Couchsurfing with free nights at someone’s place. There are some customs that come along with this travel style:</p>
<ul>
<li>Hosts usually look for trustworthy and interesting people.</li>
<li>Food and drinks are usually not included!</li>
<li>Gifts are welcome but above all, be a sociable and respectful person.</li>
<li>Do not be afraid to say no to some hosts, safety comes first and Couchsurfing is not a free from bad people.</li>
</ul>
<p><strong>AirBnb:</strong> I would say this is Couchsurfing’s little brother. It has the same concept where you stay at local people’s places but this time not for free. The difference is you have to pay your reservation per night so it’s somewhere between a hotel and a Couchsurfing experience. Why do I think of it like that? Well, because you are paying for your room just like we do in hotels except you might find a good nice host or someone less pleasant.<br>Anyway, references are there to guide you where your requests should be sent!</p>
<p><strong>Booking.com:</strong> Because I’m a solo traveler and hotels are racist to single people, I try to avoid this option as much as I can. However, sometimes it becomes the only available choice when Couchsurfing and AirBnB are not very popular in my destination.</p>
<h3 id="Attraction-tickets"><a href="#Attraction-tickets" class="headerlink" title="Attraction tickets"></a>Attraction tickets</h3><p>In the beginning, I though buying attraction tickets in advance is a good idea. It turned out it’s not! Probably the only good thing is you will carry less cash to your destination but everything they are trying to sell you about short waiting time is a scam. I bought the New York City pass (bundle of tickets for major NYC attractions) thinking I won’t have to wait in lines but I was totally wrong. If I choose to visit NY again, I will buy every ticket separately but that’s my personal opinion of course.</p>
<h1 id="Itinerary"><a href="#Itinerary" class="headerlink" title="Itinerary"></a>Itinerary</h1><p>After these long boring steps of preparation, things are about to get more interesting. Introducing Marguerite: an ambitious traveler going out on an adventure. In this section, we will follow this young lady on her long journey to visit Canada &amp; the United States and try to have an idea on what awaits us on the other side of the Atlantic Ocean.</p>
<h3 id="Montreal-part-1"><a href="#Montreal-part-1" class="headerlink" title="Montreal part 1"></a>Montreal part 1</h3><p>Marguerite flew to Montreal using an international flight. Passengers of international flights must go through immigration check. Marguerite gave her passport to the immigration officer, mentioned she is here on vacation for one week and planning to stay at 501 Avenue Mont-Royal. The officer didn’t feel anything awkward about Marguerite’s but wondered if she intends to go elsewhere in Canada. Marguerite said yes: Toronto &amp; Niagara Falls. The officer got his answers so he wished her a pleasant stay in Canada and gave her back her passport.<br>Now that she made it to Canada, she bought a 3 day public transportation pass in Montreal. This pass can be bought from STM vending machines and gave her unlimited travel for 3 consecutive days for 18$ and it’s even valid on the airport shuttle to downtown.<br>Hint: <a href="http://www.stm.info/en/info/fares/transit-fares/3-days" target="_blank" rel="external">http://www.stm.info/en/info/fares/transit-fares/3-days</a></p>
<h3 id="Ottawa"><a href="#Ottawa" class="headerlink" title="Ottawa"></a>Ottawa</h3><p>After roaming around in Montreal for two days, she wanted to see Ottawa. Marguerite’s idea was to do this through a travel agency called Sinorama. It provides a one day package to visit Ottawa’s best attractions. The agency’s bus picks up travelers from china town in Montreal to go to Ottawa (2h ride) where they spend the day with a special guide. Our Marguerite was tempted by the idea, so she made the reservation through this <a href="http://www2.sinoramabus.com/ucc2/index.php?id=OT1D&amp;" target="_blank" rel="external">link</a><br>But a funny surprise was awaiting her. Actually, the price she paid at the reservation time did not include attraction tickets, launch and guide/driver tip! It only allowed her participation to the trip. She needed to pay an extra 60 $ to really enjoy the full experience (All attractions + launch).</p>
<p>Hint: You can choose not to pay for all the attractions or even bring your own food to cut expenses but you must get back to the bus at the time specified by the tour guide.</p>
<p>Although the agency service was mediocre, Marguerite still enjoyed her time in Ottawa. It’s a beautiful small city but quite an interesting one. Her number one activity was the Ottawa boat cruise.</p>
<h3 id="Montreal-part-2"><a href="#Montreal-part-2" class="headerlink" title="Montreal part 2"></a>Montreal part 2</h3><p>3 days passed quickly between Montreal &amp; Ottawa, Marguerite’s best places were the Montreal city view from the Mont Royal Park and the Notre dame basilica in downtown. The next step in this young lady’s itinerary is Toronto, she bought a MegaBus ticket 2 months in advance for 10$. MegaBus terminal is on the 997 Rue Saint Antoine Ouest near the Bonaventure metro station. After a 6 hours trip, she made it to Toronto.</p>
<h3 id="Toronto"><a href="#Toronto" class="headerlink" title="Toronto"></a>Toronto</h3><p>MegaBus station in Toronto is located on 610 Bay Street near Dundas metro station. Toronto isn’t a huge city so Marguerite made an Airbnb reservation in downtown to avoid taking public transportations.<br>Hint: Transportation fares can be found here: <a href="https://ttc.ca/Fares_and_passes/index.jsp" target="_blank" rel="external">https://ttc.ca/Fares_and_passes/index.jsp</a></p>
<p>According to Toronto city guide, there were not so many things to do in this city. Probably the most important one was the CN Tower. Marguerite got amazing pictures from the highest observation deck in the world but this didn’t keep her from spending only two days in Toronto. She quickly packed her stuff and went back to the MegaBus station heading to the Niagara Falls.</p>
<h3 id="NiagraFalls-CA-Side"><a href="#NiagraFalls-CA-Side" class="headerlink" title="NiagraFalls (CA Side)"></a>NiagraFalls (CA Side)</h3><p>The goal Marguerite set in her mind when visiting the falls was to see it by day and night. This means she needed a place to sleep. Because NiagaraFalls is more of a tourist site than a city, it was hard to find a Couchsurfing or even an Airbnb host who lives close by. Last choice was to get a hotel room. Surprisingly, she managed to get a nice room for just 40$ at the DaysInn Hotel (5943 Victoria Avenue, Niagara Falls) which is not very far from the Megabus stop situated at FallsView Casino (4555 Erie Ave, Niagara Falls, ON). The room had two king size beds and a bathroom plus the hotel offers free breakfast and access to the pool. Anyway, upon arrival, it’s necessary to show an Id and the credit card used to make the reservation to collect the room keys. After that, it’s fun time or may be a quick nap because admiring the falls can get a bit boring after 2 hours.<br>Fortunately, there are other attractions to pass time with and Marguerite’s favorite was a journey to the falls. It’s a boat ride that got her so close to the falls that she found herself surrounded by rainbows.<br>Hint: Two companies provide the boat ride attraction: HornBlower and MaidOfMist. Please note that if you are on the Canadian side, you should buy HornBlower tickets because MaidOfMist boarding platform exists only on the American Side of the falls.<br>By nightfall, the falls are lit with amazing bright lights which make it even more beautiful. Marguerite was a smart planner and chose a night with a firework show to add more fun to her day.<br>Hint: The firework calendar can be found <a href="http://www.niagarafallstourism.com/fireworks/" target="_blank" rel="external">here</a></p>
<h3 id="NiagraFalls-US-Side"><a href="#NiagraFalls-US-Side" class="headerlink" title="NiagraFalls (US Side)"></a>NiagraFalls (US Side)</h3><p>The next day, Marguerite has Chicago on her road map. There are many ways to get to Chicago. Probably the easiest way is to take the bus back to Toronto airport and then fly to the windy city but where the adventure in that? The coolest thing is to cross the American boarders on foot, and take a picture of herself between the Canadian and the American flag. This is possible thanks to the rainbow bridge: an international bridge between Canada and the United States with a magnificent view over the falls.<br>Hint: Cars and pedestrians are allowed on the rainbow bridge but usually the waiting time for boarder check is shorter when you are on foot.<br>Custom boarders are on both sides of the rainbow bridge, so Marguerite didn’t forget her passport before taking the pedestrian lane. She also brought with her 50 Canadian cents in quarters. Its fees she had to pay to cross the international bridge.<br>American custom boarders are no joke, and without their stamp, Marguerite knew that her trip might end there. The agent asked the usual question about how long she intends to stay and why is she coming here? Marguerite explained she is visiting the United States as a tourist and will be staying for 2 weeks before going back home. She even showed her ticket back home. The agent asked one last question: Where will you be staying? Marguerite smiled as she knew she’s almost there and replied by giving her host’s address in Chicago. The agent requested 6 American dollars as fees for entering the US but that was no match for the joy Marguerite felt after crossing successfully her first international bridge.<br>Next step is to go to Buffalo airport to take the plane to Chicago but this is a bit tricky. Because Buffalo airport is about 50 km (30 miles) away from Niagara Falls, 3 options were available.<br>First, rent a car and leave it at the airport which was very expensive to our tight budget traveler.<br>Second, take a taxi to the airport, it will be around 40 min drive and cost at least 75$, it doesn’t sound bad but because she doesn’t have anyone to share the cab with it’s still expensive.<br>Last choice was public transportations, there is no direct line from Niagara Falls to Buffalo Niagara airport so Marguerite must take bus number 40 to Buffalo city and then switch to bus number 204 to get to the airport. At first glance, Marguerite said, this is insane, I don’t know where the bus stops are nor I can do this by myself but when she knew that it costs only 4.5$,  she immediately changed her mind saying: oh yeah, let’s fuc**ng do this !<br>Hint: Well it’s true it’s surprisingly cheap but this should not be your only motive. These are not tourist buses and you will be going through real American villages, the view and experience is totally worth it and I will be doing my best to explain where the bus stops are located. My only advice is to do this during the day for safety reasons.<br>Marguerite started by activating her sim card, and thanks to google maps and the internet connection, she truly felt invincible. The bus station location (Rainbow Boulevard &amp; Niagara Street) was identified immediately as a precaution to avoid missing the bus.</p>
<p>Hint: You must stand on the same roadside as a mini statue of liberty.</p>
<p>Google maps didn’t just locate the bus stop but it also gave our young traveler about the bus times. Because she still has time, she decided to take a tour inside the Niagara Falls state park and Goat Island to admire the falls from the US side rather than sit and wait.<br>Marguerite made sure to be back on time to catch the bus and she also checked that she has enough change to buy the ticket bus which costs 2$ on bus number 40.<br>Hint: Beware ticket machines on American buses hardly return any money. The driver will likely not let you on the bus if you don’t pay the full ticket price.<br>The first trip took about 1 hour and got to see another side of United States: farms, old houses, small towns and weird people!<br>Using the internet connection and google maps, she kept track of the bus movements and knew exactly when to request for the bus to stop (North Division &amp; Ellicott Street).</p>
<p>Hint: Do not rely on the kindness of the drivers nor the station signs you might find on buses to know where and when to stop. They are both poor in the United States and you might attract too much attention if you keep asking questions. Google maps and internet connection can really make you the master of the universe if you know how to use them. Finally, to ask for the bus to stop, pull one of two thin lines on both sides of the bus. Primitive technique but it works ;)</p>
<p>Marguerite was amazed when she saw Buffalo downtown, it was alive and the American style was everywhere but she preferred not to roam around and immediately took the 204Express bus (2.5$) to the airport (40 min trip). At the Buffalo Niagara airport, things got less complicated because flights are national so Marguerite avoided the long immigration waiting lines. However, security checks were very serious comparing to other countries. Nonetheless, the plane was on time and Marguerite was excited to fly to Chicago.</p>
<h3 id="Chicago"><a href="#Chicago" class="headerlink" title="Chicago"></a>Chicago</h3><p>Before leaving her country, Marguerite sent Couchsurfing requests to be hosted in Chicago and one of them got accepted. The host lives in the suburbs but that was no problem to Marguerite because the transportation utilities are quite good in the windy city. She decided to acquire a special transportation pass which allows unlimited access to all public transportation utilities (metro, bus…) for a duration of 1/3/7 days for 10$/20$/28$. The pass can be bought from any metro station but she preferred to do so at the airport. In fact Chicago airports (O’Hare and Midway) are connected to the city by metro so she thought it’s best if she can save the metro ticket fees and start right away with the CTA pass. One last thing she didn’t take into account was that these passes have to be loaded on a contactless credit card which didn’t have. Hopefully after asking CTA agents, they advised to buy a Ventra Card and load the pass on that card. The Ventra card works similarly to a credit card but it only pays transportation tickets. It costs an extra 5$ but because Marguerite registered her card online via <a href="https://www.ventrachicago.com/register-account/" target="_blank" rel="external">https://www.ventrachicago.com/register-account/</a>, the 5$ were refunded. It was very useful because Marguerite was planning to stay 3 days in this amazing city and leave on the fourth day. Although Chicago is a big city, getting from one place to another was not hard thanks to google maps and the internet connection once again. Marguerite enjoyed her 3 days in Chicago and her favorite things were the deep dish pizza at Gino’s and the city view by night from the Adler planetarium coffee shop.</p>
<h3 id="Miami"><a href="#Miami" class="headerlink" title="Miami"></a>Miami</h3><p>On the fourth day, Marguerite packed her stuff and headed to Chicago Midway airport to take the plane to Miami. It was an indirect flight because direct ones are expensive. Indirect flights passengers usually use the huge Atlanta airport to switch from one plane to another. Air Hostess kindly informed Marguerite about her next boarding gate number to make airplane switching easier.<br>Hint: Atlanta airport is about 30 min away from downtown by metro so if you feel like discovering Atlanta, you might have to that into account.<br>Miami is may be known for its beaches and night life but surely not for its public transportation which relies heavily on buses.<br>The struggle began at Miami international airport where Marguerite had to take the Airtrain to the bus station and then the 150 bus to Miami Beach where she was intending to stay at another Couchsurfing host. She planned 3 days to fully explore Miami but it was a big disappointment. Most attractions were not interesting and at least 2 buses must be taken to get from Miami Beach to downtown. Even if Miami bikes seemed like a good idea in the beginning, it was expensive and the bikes are not allowed to leave Miami Beach.<br>She felt that Miami is overrated but at least she enjoyed her time on the beach playing volleyball and resting her feet in the ocean.<br>On the fourth day, our little Marguerite was happy to finally leave Miami heading for the US capitol: Washington DC</p>
<h3 id="Washington-DC"><a href="#Washington-DC" class="headerlink" title="Washington DC"></a>Washington DC</h3><p>The flight was similar to the one she took coming to Miami. Little Marguerite took a plane to Atlanta and then switched to take another one heading to DC. She did that on purpose because it was the cheapest way to land in Ronald Reagan national airport which was the closest to DC downtown.<br>Actually, by looking at Washington DC trip advisor map, this adventuring young lady realized how small the city was. Hence, she decided to rent a bed in downtown through Airbnb to save money and explore the town on foot. She was right to take this decision because metro tickets are relatively expensive in DC and attractions are mostly located near the National Mall. Probably one thing she miscalculated was how long she should have stayed in this town. She planned 2 days and a half but that was barely enough for a history fan girl. Free world class museums without waiting lines plus a big zoo!<br>Hint: If you want to learn about the United States history, DC is the right place for you.<br>She was lucky to enjoy a free guided tour in the US Capitol without making a prior reservation. She was tipped that if she stood in the line at the beginning of the day, they might find her an empty slot with a visiting group.<br>Hint: It’s better to make a reservation at least 2 months to secure your visit to the US Capitol.<br>Reservation link: <a href="https://www.visitthecapitol.gov/plan-visit/book-tour-capitol" target="_blank" rel="external">https://www.visitthecapitol.gov/plan-visit/book-tour-capitol</a><br>On the fourth day, Marguerite went to the Union Station to get on a Megabus heading to New York. The big apple is only 4 hours ride through Baltimore, Philadelphia and stops in Manhattan on the intersection of 7th Ave and 27th St.</p>
<h3 id="New-York"><a href="#New-York" class="headerlink" title="New York"></a>New York</h3><p>New York is the last stop in Marguerite’s trip so she intended to make it the best she can. She planned to stay 4 days in NY Couchsurfing in Manhattan. This would be perfect because most of the important attractions are located within reach. New York subway passes are affordable: <a href="https://www.newyorkpass.com/En/new-york-subway-transportation/" target="_blank" rel="external">https://www.newyorkpass.com/En/new-york-subway-transportation/</a><br>But Marguerite was not tempted by the idea. Because she had plenty of time, armed with patience and courage to walk long distances, she decided to explore Manhattan on foot. Unfortunately, that was not a great idea. Walking all over Manhattan is a big challenge that requires time and a lot of effort. May be Marguerite had the time factor but after 3 weeks of traveling, her energy was drained out and her feet were heavier than usual.<br>Anyway, Marguerite is strong and she won’t give up easily. Not a single public transportation was used during those 4 days. It’s crazy but only the crazy things we do are the ones worth remembering she said.<br>She had great time in Central Park, Brooklyn, Times Square, Highline Park, Statue of Liberty, eating hot dogs and pizza slices. However, two things she didn’t really appreciate: Some attraction had really long waiting lines especially the Empire State building. It can take up to 1 hour to get to the observatory deck which usually ruined her schedule.<br>Hint: It exists two other observatory decks to admire New York from above, Top of the rock and the one world tower. I recommend the top of the rock rather than the empire state building because it is less crowded and has a view on Central Park. I didn’t go on the one world tower so I can’t really comment on that.<br>The second point Marguerite was disappointed about was that she didn’t get to the crown level of the Statue of liberty. Actually, when she bought the New York City Pass, she read that going up the crown level is included. It turns out it’s only included for the few lucky people who must be first on line because the passes are limited. Eventually she got to visit the statue of liberty but only stayed on the ground level.<br>Hint: Do not count on your New York City Pass, reserve your crown level access as soon as you can. Only a limited number of people can go up to that level and actually get to touch the Statue. Places run out quickly so reserve weeks in advance through this link:<a href="https://www.statueoflibertytickets.com/Statue-Of-Liberty-Tours/" target="_blank" rel="external">https://www.statueoflibertytickets.com/Statue-Of-Liberty-Tours/</a><br>On the fourth day, by 10 PM New York Time, Marguerite said good bye not only to New York but to this wonderful journey she accomplished.<br>She had to take the metro to JFK airport which is not a hard thing but it requires special attention.<br>Hint: Metro lines that connect to JFK airport are lines A and E. They both have different destinations so make sure you are on the right train. Then, both of these metros get you to a second station to take the JFK Airtrain either from Jamaica station or the Howard beach station. Your first metro ticket is not valid for the Airtrain ticket so you need to buy another one. Make sure you have coins on you because ticket machines had a hard time accepting the one dollar bills. Finally, It take over an hour to go from Manhattan to JFK airport so make sure you leave early enough to be on time for your plane.</p>
<h3 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h3><p>I wrote this guide because I believe we should stop seeing the world from our screens. It’s true we don’t all have the means to travel but this doesn’t mean that there isn’t a place nearby worth exploring. The more you explore, the better you become …<br>Special thanks for all my Couchsurfing hosts, AirBnb hosts, strange people I met during my trip and especially to the wonderful Marguerite: I shall remember your kindness everyday of my life and happiness fill your days wherever you go.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This guide is destined to help people visit the eastern coasts of Canada and United States. It will cover the following Cities: &lt;strong&gt;Montreal&lt;/strong&gt; - &lt;strong&gt;Ottawa&lt;/strong&gt; - &lt;strong&gt;Toronto&lt;/strong&gt; – &lt;strong&gt;Niagara Falls&lt;/strong&gt; (Canadian &amp;amp; US Sides) - &lt;strong&gt;Chicago&lt;/strong&gt; - &lt;strong&gt;Miami&lt;/strong&gt; - &lt;strong&gt;Washington DC&lt;/strong&gt; - &lt;strong&gt;New York&lt;/strong&gt;. I will focus more on what you need to bring and how to travel from one place to another. I will only be suggesting how much time to spend in every town but it’s really up to you to choose what to see and do in every town. Finally, this guide is based on my personal experience and I’ll be happy to answer any questions you might have. If you like it, share it!&lt;br&gt;
    
    </summary>
    
    
      <category term="traveling" scheme="https://mseknibilel.github.io/tags/traveling/"/>
    
  </entry>
  
  <entry>
    <title>Yet another design pattern</title>
    <link href="https://mseknibilel.github.io/2017/06/18/yet-another-design-pattern/"/>
    <id>https://mseknibilel.github.io/2017/06/18/yet-another-design-pattern/</id>
    <published>2017-06-18T11:57:03.000Z</published>
    <updated>2017-06-18T13:18:14.276Z</updated>
    
    <content type="html"><![CDATA[<p>It all started with this <a href="https://njimmahdi.blogspot.fr/2014/05/factory-pattern-with-net-technology.html" target="_blank" rel="external">article</a> posted by a good friend of mine about his way of implementing the factory pattern.</p>
<p>Although there is nothing to approach about his way, something kept itching me to write a second article about another design pattern that might fit in this situation as well.<br><a id="more"></a></p>
<p>Let’s start by reviewing the task:</p>
<p>The Straw hats pirates (the pirate crew in the one piece anime) contacted my company to write a software to automate pizza preparation. Sanji explained that in order to prepare pizza we need to:</p>
<ol>
<li>Prepare the Pizza Dough</li>
<li>Prepare the sauce</li>
<li>Add pizza sauce and pizza ingredients <strong>according to each person’s desires</strong></li>
<li>Put the pizza in the oven</li>
</ol>
<p>In order to complete the task, my friend wrote a Pizza maker base class where inherited classes redefine the AddIngredient Method to suit each person’s choices.</p>
<div class="figure center" style="width:;"><img class="fig-img" src="https://i.imgur.com/eDFLVvH.jpg" alt="Proposed solution"><span class="caption">Proposed solution</span></div>
<p>For example, if the person is Nami then ingredients will be cheese and olives. To add his own <a href="http://www.codeproject.com/Articles/772836/Factory-Pattern-with-NET-Technology" target="_blank" rel="external">touch</a>, my friend added a configuration section to make class adding totally on the fly. There is no doubt that the solution is flexible and neat but what happens when more people joins in the team? Or when current crew feels like tasting something new? Are we going to create sub classes for each possibility like this:</p>
<div class="figure center" style="width:;"><img class="fig-img" src="https://i.imgur.com/vmpIvCw.jpg" alt="Future problem"><span class="caption">Future problem</span></div>
<p>It’s sure not a good solution because with 3 ingredients (Olive, cheese and meat) we can have up to 7 different combinations (result = n! / [(n-k)! k!] Where n is total number of ingredients and k is the number of the picked ingredients), Imagine what will happen with 4 or 5 ingredients =&gt; explosion in number of sub classes.</p>
<p>What should we do then? It’s time to introduce the Decorator Pattern!</p>
<blockquote><p>The decorator pattern attaches additional responsibilities to an object dynamically. Decorators provide a ﬂexible alternative to subclassing for extending functionality.</p>
<footer><strong>Wikipedia</strong></footer></blockquote>
<p>Don’t worry if you don’t understand this, I myself didn’t when I first read it but this example will help clear things for us.</p>
<div class="figure center" style="width:;"><img class="fig-img" src="https://i.imgur.com/WcYbMcW.png" alt="Decorator pattern"><span class="caption">Decorator pattern</span></div>
<p><strong>Component:</strong> is the father of all, can exist on his own or equipped with decorators.<br><strong>ConcreteComponent:</strong> son of component, can do more cool stuff than his old father.<br><strong>Decorator:</strong> sort of the mother of all decorators, it teaches them the ABCs of life without precising how to act.<br><strong>ConcreteDecorator:</strong> the real deal where decorator operations are defined.</p>
<p>Let’s put this in action and see what we get:</p>
<div class="figure center" style="width:;"><img class="fig-img" src="https://i.imgur.com/6T4Geen.png" alt="Solution with decorator pattern"><span class="caption">Solution with decorator pattern</span></div>
<p><strong>Explanation:</strong></p>
<p>Our main goal is to treat all pizza objects the same (this is why everything inherits from Pizza class) and provide a mecanism to decorate our objects in a way that makes them different from one another.</p>
<p>The Pizza here is your component, it’s the base class of the object you want to decorate.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Pizza</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PreparePizza</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddSauce</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">MakeDough</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PutInOven</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PrepareSauce</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Pizza with "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Three classes derive directly from Pizza: the first two (CrustyDoughPizza and ThickDoughPizza) are considered ConcreteComponents since they extend Pizza’s behavior( Exp: creates a different more delicious dough).</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CrustyDoughPizza</span> : <span class="title">Pizza</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MakeDough</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//Make CrustyDough</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Crusty Dough Pizza with "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThickDoughPizza</span> : <span class="title">Pizza</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">MakeDough</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//Make thick dough</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Thick Dough Pizza with "</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The last third sub class is PizzaIngredient which is the base class of any pizza ingredient since it defines what is expected from an ingredient. In this case, it forces every ingredient to override the behaviour of GetIngredients method of the Pizza class in order to have its own special implementation. Notice also the existence of a pizza field (MyPizza), its use will be covered later.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">PizzaIngredient</span> : <span class="title">Pizza</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> Pizza MyPizza &#123;<span class="keyword">get</span>; <span class="keyword">set</span>;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">abstract</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Finally, by implementing PizzaIngredient methods, subclasses share the same methods but with custom functionalities therefore they can decorate Pizza objects rendering equally different but without compromising their origin. Hold on a sec, how can they decorate Pizza objects ?</p>
<p>Excellent question, each ingredient must have a constructor which takes a Pizza argument. Decoration occurs when this argument is assigned to the MyPizza property. If we need to decorate an already decorated object, all we need to do is pass in the decorated object as an argument( it’s pizza after all) to the custom constructor of the decorator.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Meat</span> : <span class="title">PizzaIngredient</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Meat</span>(<span class="params">Pizza pizza</span>)</span></div><div class="line">    &#123;</div><div class="line">        MyPizza = pizza;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> MyPizza.GetIngredients() + <span class="string">" Meat"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cheese</span> : <span class="title">PizzaIngredient</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cheese</span>(<span class="params">Pizza pizza</span>)</span></div><div class="line">    &#123;</div><div class="line">        MyPizza = pizza;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> MyPizza.GetIngredients() + <span class="string">" Cheese"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Olive</span> : <span class="title">PizzaIngredient</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Olive</span>(<span class="params">Pizza pizza</span>)</span></div><div class="line">    &#123;</div><div class="line">        MyPizza = pizza;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">string</span> <span class="title">GetIngredients</span>(<span class="params"></span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> MyPizza.GetIngredients() + <span class="string">" Olive"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Let’s try to make a CrustyDoughPizza with olive only:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">CrustyDoughPizza myPizza = <span class="keyword">new</span> CrustyDoughPizza();</div><div class="line"></div><div class="line"><span class="comment">//Decorate the pizza with olive</span></div><div class="line"></div><div class="line">Olive olivePizza = <span class="keyword">new</span> Olive(myPizza);</div><div class="line"></div><div class="line"><span class="keyword">var</span> pizzaIngredients = olivePizza.GetIngredients();</div><div class="line"></div><div class="line"><span class="comment">//expected answer = Crusty pizza with olive</span></div></pre></td></tr></table></figure>
<p><strong>How? One word: Recurrence !</strong></p>
<p>When we call GetIngredients of Olive, it will bounce to call GetIngredients of CrustyPizza before it replies back to us just like in the schema below.<br><div class="figure center" style="width:;"><img class="fig-img" src="https://i.imgur.com/hMQimZG.png" alt="Recurrence"><span class="caption">Recurrence</span></div></p>
<p>Let’s now do a more complicated thing: a ThickDough Cheese and Meat Pizza:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ThickDoughPizza myPizza = <span class="keyword">new</span> ThickDoughPizza();</div><div class="line"></div><div class="line"><span class="comment">//Decorate the pizza with Meat</span></div><div class="line">Meat pizzaWithMeat = <span class="keyword">new</span> Meat(myPizza);</div><div class="line"></div><div class="line"><span class="comment">//Decorate the pizza with cheese</span></div><div class="line">Cheese pizzaWithCheese = <span class="keyword">new</span> Cheese(pizzaWithMeat);</div><div class="line"><span class="keyword">var</span> pizzaIngredients = pizzaWithCheese.GetIngredients();</div><div class="line"></div><div class="line"><span class="comment">//expected answer = Crusty pizza with meat cheese</span></div></pre></td></tr></table></figure>
<p>I believe this is a good solution for situation when we don’t have control over the choices of the client. The decorator pattern makes components and decorators behave the same way abstracting differences and eliminating useless conditional tests but you may want to be careful about how you want to adjust your implementation to your case through interfaces and abstract classes</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It all started with this &lt;a href=&quot;https://njimmahdi.blogspot.fr/2014/05/factory-pattern-with-net-technology.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;article&lt;/a&gt; posted by a good friend of mine about his way of implementing the factory pattern.&lt;/p&gt;
&lt;p&gt;Although there is nothing to approach about his way, something kept itching me to write a second article about another design pattern that might fit in this situation as well.&lt;br&gt;
    
    </summary>
    
    
      <category term="craftsmanship" scheme="https://mseknibilel.github.io/tags/craftsmanship/"/>
    
  </entry>
  
  <entry>
    <title>7 Steps for professional code</title>
    <link href="https://mseknibilel.github.io/2017/06/18/7-Steps-For-Professional-Code/"/>
    <id>https://mseknibilel.github.io/2017/06/18/7-Steps-For-Professional-Code/</id>
    <published>2017-06-18T11:01:46.000Z</published>
    <updated>2017-06-18T13:19:06.508Z</updated>
    
    <content type="html"><![CDATA[<p>Yeah, i know … The first question that pops into your minds is: Doesn’t people get tired of writing this bla bla over and over again ?!! My Code is perfect and I don’t need no steps to tell me what to do and what not to do … Well , I believe that if our codes where so perfect we wouldn’t spend debugging it , creating break points and buying new keyboards !!<br>Come on, it won’t take you over 10 minutes to read and perhaps avoid looking like this.</p>
<a id="more"></a>
<div class="figure nocaption center" style="width:;"><img class="fig-img" src="https://i.imgur.com/nZ4zb0O.jpg" alt=""></div>
<p><strong>Step 1 :</strong></p>
<p>Initialize Initialize and Initialize!! Don’t leave your attributes and parameters naked like that; give them a value, a string or even a null!!<br>This will minimize the chance of throwing an unexpected exception from nowhere!</p>
<p><strong>Step 2 :</strong></p>
<p>Choose meaningful names for your attributes, methods and classes. This will be handy when your lines of code starts exploding like firecrackers on New Year’s Eve and especially it will make your code friendlier for your colleagues and will keep them from cursing you behind your back.</p>
<p><strong>Step 3 :</strong></p>
<p>Beware of the Copy/Paste, it might look like the most confortable times of your coding days but one simple type change, a same parameter name or even a missed parenthesis  will definitely ruin that day for you.</p>
<p><strong>Step 4 :</strong></p>
<p>Okay, I know that you are creative and enthusiastic but slow down dude, be wise too!!<br>Don’t start everything from scratch each time you face a new problem because that will increase the complexity of your work. Instead, take a deep breath, analyse your problem and compare it to what you have got. I am sure that you will end up by adapting something old to solve what’s new.</p>
<p><strong>Step 5 :</strong></p>
<p>Now, this is no longer the ice age people, we got tools, we got power and we got style! Don’t throw all that in the bin, use them wisely and effectively and you will see how much your coding life will be easier.<br>For cave people who don’t know what tools could be : I am talking about OOP , TDD, break points , stack trace , alerts , console messages , message boxes, …etc. And of course the thing inside your skull AKA the brain!</p>
<p><strong>Step 6 :</strong></p>
<p>What I have seen in similar articles is this : do not waste time writing fancy code , do not try to make your colleagues say “What the Hell ? “ , just write simple things and let the computer handle the unnecessary loops.<br>I agree with that but what if there is an opportunity to make our code smaller, elegant and more importantly robust, would we miss that opportunity just because we want to jump on the first obvious solution that could be wrong but our laziness is blinding us from seeing it?</p>
<p><strong>Step 7 :</strong></p>
<p>He is every coder‘s mentor, he is every researcher‘s heaven, he is our friend, our saviour and our idol …. He is www.google.com , for any problems just type in what you got and he will answer!</p>
<p>I hope you like my advices and willing to follow them.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yeah, i know … The first question that pops into your minds is: Doesn’t people get tired of writing this bla bla over and over again ?!! My Code is perfect and I don’t need no steps to tell me what to do and what not to do … Well , I believe that if our codes where so perfect we wouldn’t spend debugging it , creating break points and buying new keyboards !!&lt;br&gt;Come on, it won’t take you over 10 minutes to read and perhaps avoid looking like this.&lt;/p&gt;
    
    </summary>
    
    
      <category term="craftsmanship" scheme="https://mseknibilel.github.io/tags/craftsmanship/"/>
    
  </entry>
  
  <entry>
    <title>Agile estimation</title>
    <link href="https://mseknibilel.github.io/2017/06/18/Agile-Estimation/"/>
    <id>https://mseknibilel.github.io/2017/06/18/Agile-Estimation/</id>
    <published>2017-06-18T10:05:14.000Z</published>
    <updated>2017-06-18T13:17:36.587Z</updated>
    
    <content type="html"><![CDATA[<p>Estimation is a very important part of scrum. It allows the team to evaluate how much work is needed to finish an item and therefore conclude what can be delivered next sprint. It also helps product owners prioritize their items by taking into consideration the required amount of work. An item that takes too much time to be done usually has a lesser priority than another that can be finished quickly. Estimating the right way is essential in scrum to get the best possible results.<br><a id="more"></a></p>
<div class="figure nocaption center" style="width:;"><img class="fig-img" src="https://i.imgur.com/UqSjuq8.png" alt=""></div>
<p>There are many techniques to estimate like story points, T-shirt size and time estimation. The latter is the most common method because it is well appreciated by top management.  It’s an easily understood parameter and can be converted to cost therefore gives more control on the project. This is incorrect because estimating in time gives inaccurate results due to the nature of software industry. Most new feature can be done using different methods so it’s not clear which one to choose at the beginning. Furthermore, bugs need to be analysed in order to find root causes. This investigation is hardly measurable in time because it depends on the complexity of the problem and the skills of the investigator. All these factors make time estimation hard thus planning poker ceremonies consume a lot of time which means attendees loss of focus and interest quickly. This is not the only frustrating thing, time estimation is a symbol of micro management. Managers tend to ask the agile team to time track their daily activities and sometimes they go furious if one item does not respect its estimation. This impacts negatively the team motivation (babysitting feeling, lack of trust) and make estimations higher than usual.</p>
<p>The second method used for estimation is T-shirt size. It consists on estimating items according to their work amount: XS, S, M, L and XL. This makes estimation relatively easier and planning pokers shorter because it doesn’t require to spend lot time analysing solutions and voting options are limited. It’s sufficient to say this item is small or that item is medium in order to assign it to category and move to the next item. The results are more accurate if taken from a category point of view but from a more granular perspective some items might consume more time than it was estimated for therefore reducing the accuracy of team velocity. Comparing items becomes also complicated because there is no clear mathematical relationship between extra small and large.</p>
<p>The last method for estimation is story point estimation. The goal of this technique is to assign a number of points to every task based on the complexity. For example, a complicated story will have more points than a simpler one. This approach helps the dev team to focus on how difficult is the problem from a technical point of view rather than how much time needed to accomplish the task. Poker plannings don’t take too much time because it’s a complexity evaluation (not a solution discussion) and voting choice is limited. In addition, stories can be compared based on the number of assigned points making velocity more accurate since it is the sum of all story points. Furthermore, this technique helps management predict when an item will be delivered. For instance, if a team velocity is equal to 15 and the backlog has items with following estimated complexity points: 5, 3, 5, 2, 7. The last item with 7 points will be delivered on the next sprint because the current one is full (5+3+5+2 = 15). If the sprint duration is equal to 2 weeks than the item should be delivered in 2 weeks. This method is pretty efficient when coming to drawing charts about the product progress and planning.</p>
<p>Although scrum recommends this method for estimation, it’s the least used one because it’s not well understood. Let’s dive deeper in this concept :</p>
<p>Estimating in story points is about guessing how complex the task is. It’s a total abstraction from time. This abstraction is unfortunately confused with the fact that developers might seize the opportunity to spend more time than required on a specific item therefore plumbing productivity performance. Although this is true, it’s sure not the fault of story points method but laziness. Lazy people will always find an excuse even if their tasks are time boxed. The fear of budget depletion is totally understood but it should not be an excuse to time track every single activity. Like mentioned earlier, time tracking is a sign of lack of trust and micro-management. A better approach will be to trust in the dev team. Giving them power to self-organize also means giving them the responsibility to deliver requested feature while respecting deadlines.</p>
<p>Moving to story points estimation is not difficult, it can be started in parallel run mode to determine  the average team velocity. The difficult part in my opinion is to convince product owner and stakeholders about the advantages of this method. One should start with by explaining the nature of software industry and its challenges (difficult predictability, technical and functional environments). Furthermore, he should talk about how being agile means focusing on the current situation and the near future. This means that the far away future of the product is uncertain and vague but isn’t it already ? The faraway future can’t be predicted because factors change all the time so there is no need to spend too much time analysing opportunities that might not come. It’s understood that every manager would like to guarantee the success of his project but success doesn’t mean that every feature they have in mind must be delivered before the budget runs out because no one knows when the budget will really run out (budget cuts, more investments, …). The truth is success means that at the end of every sprint, the delivered product has the highest added value possible which means that managers should focus more on prioritizing their features based on their added value and worry less about the future. If applied correctly, the best insurance managers have against failure is that they can pull the plug on the project anytime and still get the best outcome possible.</p>
<p>Finally, adopting scrum and agile isn’t as easy as some people think. Velocity is a fragile factor that depends on many elements. Following KPIs must be done regularly to increase the team production. What agile believes in is that this trust motivate people and engages them even more in the process. Thinking people work better when their activities are time tracked daily will make them work more is absurd. People produce more and better when they feel involved and trusted.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Estimation is a very important part of scrum. It allows the team to evaluate how much work is needed to finish an item and therefore conclude what can be delivered next sprint. It also helps product owners prioritize their items by taking into consideration the required amount of work. An item that takes too much time to be done usually has a lesser priority than another that can be finished quickly. Estimating the right way is essential in scrum to get the best possible results.&lt;br&gt;
    
    </summary>
    
    
      <category term="agile" scheme="https://mseknibilel.github.io/tags/agile/"/>
    
  </entry>
  
</feed>
